/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TwitzMainView.java
 *
 * Created on Jun 12, 2010, 1:40:58 PM
 */

package twitz;

import java.awt.Component;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.Map;
import java.util.TreeMap;
import java.util.Collections;
import java.util.Date;
import java.util.logging.Level;
import javax.swing.ButtonGroup;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollBar;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.MenuElement;
import javax.swing.event.ChangeEvent;
import javax.swing.event.MenuEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.MenuListener;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import org.apache.log4j.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.TaskMonitor;
import twitter4j.*;
import twitz.ui.dialogs.MessageDialog;
import twitz.ui.dialogs.PreferencesDialog;
import twitz.ui.dialogs.TwitzAboutBox;
import twitz.events.TwitzEvent;
import twitz.events.TwitzEventType;
import twitz.events.TwitzListener;
import twitz.events.DefaultTwitzEventModel;
import twitz.events.TwitzEventModel;
import twitz.twitter.TwitterManager;
import twitz.testing.*;
import twitz.util.SettingsManager;
import twitz.ui.BlockedPanel;
import twitz.ui.ContactsList;
import twitz.ui.FollowersPanel;
import twitz.ui.FriendsPanel;
import twitz.ui.StatusList;
import twitz.ui.TrendsPanel;
import twitz.ui.UserListPanel;
import twitz.ui.models.StatusListModel;
import org.pushingpixels.substance.api.*;
import org.pushingpixels.substance.api.SubstanceConstants.ScrollPaneButtonPolicyKind;
import org.pushingpixels.substance.api.tabbed.*;
import org.pushingpixels.substance.api.SubstanceConstants.TabCloseKind;
import twitter4j.http.AccessToken;


import twitz.ui.SearchPanel;
import twitz.ui.StatusPanel;
import twitz.ui.TimeLinePanel;
import twitz.ui.TweetBox;
import twitz.ui.TwitzBusyPane;
import twitz.ui.UserListAccordionPanel;
import twitz.ui.UserListBox;
import twitz.ui.UserListMainPanel;
import twitz.ui.dialogs.AddListUserDialog;
import twitz.ui.dialogs.CreateUserListDialog;
import twitz.ui.dialogs.RelationshipDialog;
import twitz.util.DBManager;
import twitz.util.TwitzSessionManager;

/**
 *
 * @author Andrew Williams
 */
public class TwitzMainView extends javax.swing.JInternalFrame implements ActionListener, TwitterListener, TwitzListener, TwitzEventModel {
	private final String sessionName;
	private ResourceMap resource;

    /** Creates new form TwitzMainView */
    public TwitzMainView(TwitzApp app, String session) {//{{{
		this.sessionName = session;
		TwitzSessionManager.getInstance().addTwitzMainView(sessionName, this);
		config = TwitzSessionManager.getInstance().getSettingsManagerForSession(sessionName);
		//System.out.println("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxx");
		startMode = config.getBoolean("minimode");
		mainApp = (TwitzApp)app;
        actionMap = TwitzApp.getContext().getActionMap(TwitzMainView.class, this);
        resourceMap = TwitzApp.getContext().getResourceMap(TwitzMainView.class);
        initComponents();
		//System.out.println("WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW");

		initDefaults();
		///System.out.println("000000000000000000000000000000000000000000000000000000000000");
		updateLayout();
		//System.out.println("22222222222222222222222222222222222222222222222222222222222222");
		//Add tab position menu
		editMenu.add(createTabPositionMenu());

		//btnTweet.setEnabled(false);

		//searchHeaders.add("User");
		//searchHeaders.add("Results");
		//Configure the GUI from the defaults in the config file
		//setupDefaults();

    }//}}}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */ 
    @SuppressWarnings("unchecked") //{{{
    private void initComponents() {//GEN-BEGIN:initComponents

        contextMenu = new javax.swing.JPopupMenu();
        prefsItem = new javax.swing.JMenuItem();
        miniItem = new javax.swing.JMenuItem();
        helpItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        exitItem = new javax.swing.JMenuItem();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        prefsMenuItem = new javax.swing.JMenuItem();
        menuTabs = new javax.swing.JMenu();
        menuItemFriends = new javax.swing.JCheckBoxMenuItem();
        menuItemBlocked = new javax.swing.JCheckBoxMenuItem();
        menuItemFollowing = new javax.swing.JCheckBoxMenuItem();
        menuItemFollowers = new javax.swing.JCheckBoxMenuItem();
        menuItemSearch = new javax.swing.JCheckBoxMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        logsMenuItem = new javax.swing.JMenuItem();
        recentList = new javax.swing.JTable();
        mainPanel = new javax.swing.JPanel();
        tabPane = new javax.swing.JTabbedPane();
        recentPane = new javax.swing.JPanel();
        timelineTrendsPane = new javax.swing.JSplitPane();
        friendsPanel = new javax.swing.JSplitPane();
        friendsPane = new javax.swing.JTabbedPane();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        contextMenu.setName("contextMenu"); // NOI18N

        
        prefsItem.setAction(actionMap.get("showPrefsBox")); // NOI18N
        
        prefsItem.setIcon(resourceMap.getIcon("prefsItem.icon")); // NOI18N
        prefsItem.setText(resourceMap.getString("prefsItem.text")); // NOI18N
        prefsItem.setName("prefsItem"); // NOI18N
        contextMenu.add(prefsItem);

        miniItem.setAction(actionMap.get("showMiniMode")); // NOI18N
        miniItem.setIcon(resourceMap.getIcon("miniItem.icon")); // NOI18N
        miniItem.setText(resourceMap.getString("miniItem.text")); // NOI18N
        miniItem.setName("miniItem"); // NOI18N
        contextMenu.add(miniItem);

        helpItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        helpItem.setIcon(resourceMap.getIcon("helpItem.icon")); // NOI18N
        helpItem.setText(resourceMap.getString("helpItem.text")); // NOI18N
        helpItem.setName("helpItem"); // NOI18N
        contextMenu.add(helpItem);

        jSeparator1.setName("jSeparator1"); // NOI18N
        contextMenu.add(jSeparator1);

        exitItem.setAction(actionMap.get("quit")); // NOI18N
        exitItem.setIcon(resourceMap.getIcon("exitItem.icon")); // NOI18N
        exitItem.setName("exitItem"); // NOI18N
        contextMenu.add(exitItem);

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setAction(actionMap.get("closeFrame")); // NOI18N
        exitMenuItem.setIcon(resourceMap.getIcon("exitMenuItem.icon")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText(resourceMap.getString("editMenu.text")); // NOI18N
        editMenu.setName("editMenu"); // NOI18N

        prefsMenuItem.setAction(actionMap.get("showPrefsBox")); // NOI18N
        prefsMenuItem.setIcon(resourceMap.getIcon("prefsMenuItem.icon")); // NOI18N
        prefsMenuItem.setText(resourceMap.getString("prefsMenuItem.text")); // NOI18N
        prefsMenuItem.setName("prefsMenuItem"); // NOI18N
        editMenu.add(prefsMenuItem);

        menuTabs.setIcon(resourceMap.getIcon("menuTabs.icon")); // NOI18N
        menuTabs.setText(resourceMap.getString("menuTabs.text")); // NOI18N
        menuTabs.setName("menuTabs"); // NOI18N

        menuItemFriends.setSelected(true);
        menuItemFriends.setText(resourceMap.getString("menuItemFriends.text")); // NOI18N
        menuItemFriends.setToolTipText(resourceMap.getString("menuItemFriends.toolTipText")); // NOI18N
        menuItemFriends.setIcon(resourceMap.getIcon("menuItemFriends.icon")); // NOI18N
        menuItemFriends.setName("menuItemFriends"); // NOI18N
        menuItemFriends.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemFriendsActionPerformed(evt);
            }
        });
        menuTabs.add(menuItemFriends);

        menuItemBlocked.setSelected(true);
        menuItemBlocked.setText(resourceMap.getString("menuItemBlocked.text")); // NOI18N
        menuItemBlocked.setToolTipText(resourceMap.getString("menuItemBlocked.toolTipText")); // NOI18N
        menuItemBlocked.setIcon(resourceMap.getIcon("menuItemBlocked.icon")); // NOI18N
        menuItemBlocked.setName("menuItemBlocked"); // NOI18N
        menuItemBlocked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemBlockedActionPerformed(evt);
            }
        });
        menuTabs.add(menuItemBlocked);

        menuItemFollowing.setSelected(true);
        menuItemFollowing.setText(resourceMap.getString("menuItemFollowing.text")); // NOI18N
        menuItemFollowing.setToolTipText(resourceMap.getString("menuItemFollowing.toolTipText")); // NOI18N
        menuItemFollowing.setIcon(resourceMap.getIcon("menuItemFollowing.icon")); // NOI18N
        menuItemFollowing.setName("menuItemFollowing"); // NOI18N
        menuItemFollowing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemFollowingActionPerformed(evt);
            }
        });
        menuTabs.add(menuItemFollowing);

        menuItemFollowers.setSelected(true);
        menuItemFollowers.setText(resourceMap.getString("menuItemFollowers.text")); // NOI18N
        menuItemFollowers.setToolTipText(resourceMap.getString("menuItemFollowers.toolTipText")); // NOI18N
        menuItemFollowers.setIcon(resourceMap.getIcon("menuItemFollowers.icon")); // NOI18N
        menuItemFollowers.setName("menuItemFollowers"); // NOI18N
        menuItemFollowers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemFollowersActionPerformed(evt);
            }
        });
        menuTabs.add(menuItemFollowers);

        menuItemSearch.setSelected(true);
        menuItemSearch.setText(resourceMap.getString("menuItemSearch.text")); // NOI18N
        menuItemSearch.setIcon(resourceMap.getIcon("menuItemSearch.icon")); // NOI18N
        menuItemSearch.setName("menuItemSearch"); // NOI18N
        menuItemSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSearchActionPerformed(evt);
            }
        });
        menuTabs.add(menuItemSearch);

        editMenu.add(menuTabs);

        menuBar.add(editMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setIcon(resourceMap.getIcon("aboutMenuItem.icon")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        logsMenuItem.setAction(actionMap.get("viewHTMLLog")); // NOI18N
        logsMenuItem.setIcon(resourceMap.getIcon("icon.bug")); // NOI18N
        logsMenuItem.setText(resourceMap.getString("logsMenuItem.text")); // NOI18N
        logsMenuItem.setName("logsMenuItem"); // NOI18N
        helpMenu.add(logsMenuItem);

        menuBar.add(helpMenu);

        recentList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "I", "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        recentList.setFillsViewportHeight(true);
        recentList.setIntercellSpacing(new java.awt.Dimension(3, 3));
        recentList.setName("recentList"); // NOI18N
        recentList.setRowHeight(50);
        recentList.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        recentList.setShowHorizontalLines(false);
        recentList.setShowVerticalLines(false);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setName("TwitzMainView"); // NOI18N
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        mainPanel.setName("mainPanel"); // NOI18N

        tabPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tabPane.setInheritsPopupMenu(true);
        tabPane.setMinimumSize(new java.awt.Dimension(200, 37));
        tabPane.setName("tabPane"); // NOI18N
        tabPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabPaneKeyReleased(evt);
            }
        });

        recentPane.setName("recentPane"); // NOI18N
        recentPane.setLayout(new java.awt.BorderLayout());

        timelineTrendsPane.setDividerLocation(160);
        timelineTrendsPane.setDividerSize(8);
        timelineTrendsPane.setName("timelineTrendsPane"); // NOI18N
        recentPane.add(timelineTrendsPane, java.awt.BorderLayout.CENTER);

        tabPane.addTab(resourceMap.getString("recentPane.TabConstraints.tabTitle"), resourceMap.getIcon("icon.comments"), recentPane, resourceMap.getString("recentPane.TabConstraints.tabToolTip")); // NOI18N

        friendsPanel.setDividerLocation(180);
        friendsPanel.setDividerSize(4);
        friendsPanel.setName("friendsPanel"); // NOI18N

        friendsPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        friendsPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        friendsPane.setName("friendsPane"); // NOI18N
        friendsPanel.setLeftComponent(friendsPane);

        tabPane.addTab(resourceMap.getString("friendsPanel.TabConstraints.tabTitle"), resourceMap.getIcon("friendsPanel.TabConstraints.tabIcon"), friendsPanel, resourceMap.getString("friendsPanel.TabConstraints.tabToolTip")); // NOI18N

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 331, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                    .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                .addGap(93, 93, 93))
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                    .addContainerGap(586, Short.MAX_VALUE)
                    .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(6, 6, 6)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }//GEN-END:initComponents
	//}}}

	private void menuItemFriendsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuItemFriendsActionPerformed
	{//GEN-HEADEREND:event_menuItemFriendsActionPerformed
		toggleTabs(evt);
	}//GEN-LAST:event_menuItemFriendsActionPerformed

	private void menuItemBlockedActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuItemBlockedActionPerformed
	{//GEN-HEADEREND:event_menuItemBlockedActionPerformed
		toggleTabs(evt);
	}//GEN-LAST:event_menuItemBlockedActionPerformed

	private void menuItemFollowingActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuItemFollowingActionPerformed
	{//GEN-HEADEREND:event_menuItemFollowingActionPerformed
		toggleTabs(evt);
	}//GEN-LAST:event_menuItemFollowingActionPerformed

	private void menuItemFollowersActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuItemFollowersActionPerformed
	{//GEN-HEADEREND:event_menuItemFollowersActionPerformed
		toggleTabs(evt);
	}//GEN-LAST:event_menuItemFollowersActionPerformed

	private void menuItemSearchActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuItemSearchActionPerformed
	{//GEN-HEADEREND:event_menuItemSearchActionPerformed
		toggleTabs(evt);
	}//GEN-LAST:event_menuItemSearchActionPerformed

	private void tabPaneKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_tabPaneKeyReleased
	{//GEN-HEADEREND:event_tabPaneKeyReleased
		keyTyped(evt);
	}//GEN-LAST:event_tabPaneKeyReleased
                                   

	/**
	 * This is a utility method that will set the scrollbars of any
	 * <em>JScrollPane</em> you pass to it 8 pixels thickness. 
	 * @param pane The <em>JScrollPane</em> you want to fix
	 */
	public static void fixJScrollPaneBarsSize(javax.swing.JScrollPane pane)//{{{
	{
		if(pane != null)
		{
			//Make the scrollbar very thin
			JScrollBar vbar = pane.getVerticalScrollBar();
			vbar.setPreferredSize(new java.awt.Dimension(8, 0));

			JScrollBar hbar = pane.getHorizontalScrollBar();
			hbar.setPreferredSize(new java.awt.Dimension(0, 8));

			pane.putClientProperty(SubstanceLookAndFeel.SCROLL_PANE_BUTTONS_POLICY,
					ScrollPaneButtonPolicyKind.MULTIPLE);
		}
	}//}}}

	private void initDefaults() {//{{{
		//Make the scrollbar very thin in the user list tab
//		fixJScrollPaneBarsSize(followersPane);
//		fixJScrollPaneBarsSize(blockedPane);
//		fixJScrollPaneBarsSize(followingPane);
		this.setFrameIcon(resourceMap.getIcon("icon.user"));
		setJMenuBar(menuBar);
		//Disable the close menu since we dont allow the default session to close
		if(sessionName.equals("Default"))
		{
			//logger.debug(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;");
			exitItem.setEnabled(false);
			fileMenu.setEnabled(false);
		}
		//logger.debug("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCcc");
		blockedList = new ContactsList();
		tweetBox = new TweetBox();
		tweetBox.setSessionName(sessionName);
		//logger.debug("ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
		blocked = new BlockedPanel();
		blocked.setSessionName(sessionName);
		//logger.debug("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
		followers = new FollowersPanel();
		followers.setSessionName(sessionName);
		//logger.debug("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
		friends = new FriendsPanel();
		friends.setSessionName(sessionName);
		//logger.debug("friends----------------------------------------------");
		userListMainPanel1 = new twitz.ui.UserListAccordionPanel();//UserListMainPanel();
		userListMainPanel1.setName("userListMainPanel1"); // NOI18N
		userListMainPanel1.setSessionName(sessionName);
		//logger.debug("userlistmainpanel=============================================");
		friendsStatusPanel = new StatusPanel(sessionName);
		friendsStatusPanel.setSessionName(sessionName);
		this.friendsPanel.setRightComponent(friendsStatusPanel);
		friendsPanel.setOneTouchExpandable(true);
		friendsPanel.setDividerSize(6);

		friendsTweets = new StatusList(sessionName);
		friendsTweets.setSessionName(sessionName);
		trendPanel = new TrendsPanel();
		trendPanel.setSessionName(sessionName);
		timelinePanel = new TimeLinePanel(sessionName);
		timelinePanel.setSessionName(sessionName);
		//addPropertyChangeListener("connected", timelinePanel);
		searchPanel = new SearchPanel(sessionName);
		searchPanel.setSessionName(sessionName);
		timelineTrendsPane.setLeftComponent(trendPanel);
		timelineTrendsPane.setRightComponent(timelinePanel);
		timelineTrendsPane.setOneTouchExpandable(true);

		//Add friends list tothe friendsPane tabbed panel
		friendsPane.insertTab(resourceMap.getString("friends.TabConstraints.tabTitle"), resourceMap.getIcon("friends.TabConstraints.tabIcon"), friends, resourceMap.getString("friends.TabConstraints.tabToolTip"),0); // NOI18N
        friendsPane.addTab(resourceMap.getString("userListMainPanel1.TabConstraints.tabTitle"), resourceMap.getIcon("userListMainPanel1.TabConstraints.tabIcon"), userListMainPanel1, resourceMap.getString("userListMainPanel1.TabConstraints.tabToolTip")); // NOI18N
        //friendsPanel.setLeftComponent(friendsPane);
		//friendsPane.addTab(resourceMap.getString("following.TabConstraints.tabTitle"), resourceMap.getIcon("following.TabConstraints.tabIcon"), following, resourceMap.getString("following.TabConstraints.tabToolTip")); // NOI18N
		friendsPane.addTab(resourceMap.getString("followers.TabConstraints.tabTitle"), resourceMap.getIcon("followers.TabConstraints.tabIcon"), followers, resourceMap.getString("followers.TabConstraints.tabToolTip")); // NOI18N
		friendsPane.addTab(resourceMap.getString("blocked.TabConstraints.tabTitle"), resourceMap.getIcon("blocked.TabConstraints.tabIcon"), blocked, resourceMap.getString("blocked.TabConstraints.tabToolTip")); // NOI18N

		//Make these tabs render with a close button
		searchPanel.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
//		followersPane.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
//		followingPane.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
//		blockedPane.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
		friendsPanel.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, Boolean.TRUE);
		
		TabCloseCallback closeCallback = new TabCloseCallback() {//{{{
			public TabCloseKind onAreaClick(JTabbedPane tabbedPane, int tabIndex, MouseEvent mouseEvent) 
			{
				if (mouseEvent.getButton() != MouseEvent.BUTTON3)
					return TabCloseKind.NONE;
			//	if (mouseEvent.isShiftDown()) {
			//		return TabCloseKind.ALL;
			//	}
				//
				return TabCloseKind.NONE;
			}
			
			public TabCloseKind onCloseButtonClick(JTabbedPane tabbedPane, int tabIndex, MouseEvent mouseEvent) 
			{
			//	if (mouseEvent.isAltDown()) {
			//		return TabCloseKind.ALL_BUT_THIS;
			//	}
			//	if (mouseEvent.isShiftDown()) {
			//		return TabCloseKind.ALL;
			//	}
				String value = tabbedPane.getComponentAt(tabIndex).getName();
				if(value.equals("searchPanel")) {
					config.setProperty("tab_search", false + "");
					menuItemSearch.setSelected(false);
				}
				else if(value.equals("blockedPane")) {
					config.setProperty("tab_blocked", false + "");
					menuItemBlocked.setSelected(false);
				}
				else if(value.equals("friendsPanel")) {
					config.setProperty("tab_friends", false + "");
					menuItemFriends.setSelected(false);
				}
				else if(value.equals("followingPane")) {
					config.setProperty("tab_following", false + "");
					menuItemFollowing.setSelected(false);
				}
				else if(value.equals("followersPane")) {
					config.setProperty("tab_followers", false + "");
					menuItemFollowers.setSelected(false);
				}

				return TabCloseKind.THIS;
			}
			
			public String getAreaTooltip(JTabbedPane tabbedPane, int tabIndex) {
				//String tip = tabbedPane.getToolTipTextAt(tabIndex);
				//System.out.println(tip);
				return getRealTabTooltip(tabbedPane, tabIndex);
			}
				 
			public String getCloseButtonTooltip(JTabbedPane tabbedPane, int tabIndex) 
			{
				StringBuilder result = new StringBuilder();
				result.append("<html><body>");
				result.append("Mouse click closes <b>").append(tabbedPane.getTitleAt(tabIndex)).append("</b> tab");
				//result.append("<br><b>Alt</b>-Mouse click closes all tabs but <b>"
				//	+ tabbedPane.getTitleAt(tabIndex) + "</b> tab");
				//result.append("<br><b>Shift</b>-Mouse click closes all tabs");
				result.append("</body></html>");
				return result.toString();
			}

			public String getRealTabTooltip(JTabbedPane tabbedPane, int tabIndex) {
				String value = tabbedPane.getComponentAt(tabIndex).getName();
				String rv = null;
				if(value.equals("searchPanel")) {
					rv = getResourceMap().getString("searchPanel.TabConstraints.tabToolTip");
				}
				else if(value.equals("blockedPane")) {
					rv = getResourceMap().getString("blockedPane.TabConstraints.tabToolTip");
				}
				else if(value.equals("friendsPanel")) {
					rv = getResourceMap().getString("friendsPanel.TabConstraints.tabToolTip");
				}
				else if(value.equals("followingPane")) {
					rv = getResourceMap().getString("followingPane.TabConstraints.tabToolTip");
				}
				else if(value.equals("followersPane")) {
					rv = getResourceMap().getString("followersPane.TabConstraints.tabToolTip");
				}
				return rv;
			}
		};//}}}

		tabPane.putClientProperty(SubstanceLookAndFeel.TABBED_PANE_CLOSE_CALLBACK, closeCallback);
		
		//initTwitter();
	
		//fixTables();
	
        // status bar initialization - message timeout, idle icon and busy animation, etc
   		final Timer messageTimer;//{{{
   		final Timer busyIconTimer;
   		final Icon idleIcon;
   		final Icon[] busyIcons = new Icon[15];
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

		statusListener = new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        };
		
        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(TwitzApp.getContext());
        taskMonitor.addPropertyChangeListener(statusListener);//}}}

		//chkCOT.setVisible(false);

		//Set the tab location from config
		setTabPlacement();


		//if(startMode) //We closed in minimode
		//	miniTwitz(true);

		//Disable tabs that were removed by user
		if(!config.getBoolean("tab_friends")) {
			tabPane.remove(friendsPanel);
			menuItemFriends.setSelected(false);
		}
		if(!config.getBoolean("tab_blocked")) {
			//tabPane.remove(blockedPane);
			menuItemBlocked.setSelected(false);
		}
		if(!config.getBoolean("tab_following")) {
			//tabPane.remove(followingPane);
			menuItemFollowing.setSelected(false);
		}
		if(!config.getBoolean("tab_followers")) {
			//tabPane.remove(followersPane);
			menuItemFollowers.setSelected(false);
		}
		if(!config.getBoolean("tab_search")) {
			tabPane.remove(searchPanel);
			menuItemSearch.setSelected(false);
		}
		else {
			tabPane.addTab(getResourceMap().getString("searchPanel.TabConstraints.tabTitle"), getResourceMap().getIcon("searchPanel.tabIcon"), searchPanel, getResourceMap().getString("searchPanel.TabConstraints.tabTooltip")); // NOI18N
		}
		
		tabPane.addChangeListener(new ChangeListener() {//{{{

			public void stateChanged(ChangeEvent e)
			{
				updateTabState(forceupdate);
				forceupdate = false;
			}
		});//}}}
		
		friendsPane.addChangeListener(new ChangeListener() {//{{{

			public void stateChanged(ChangeEvent e)
			{
				updateTabState(forceupdate);
				forceupdate = false;
			}
		});//}}}

		tweetBox.setButtonEnabled(false);
		//Dont allow the tweets list to steal focus
		friendsTweets.setFocusable(false);
		friendsTweets.addTwitzListener(this);
		friends.addTwitzListener(this);
		followers.addTwitzListener(this);
		blocked.addTwitzListener(this);
		searchPanel.addTwitzListener(this);
		trendPanel.addTwitzListener(this);
		userListMainPanel1.addTwitzListener(this);
		timelinePanel.addTwitzListener(this);
		tweetBox.addTwitzListener(this);
		friendsStatusPanel.addTwitzListener(this);

		blockedList.addTwitzListener(this);
		//Disable the menuitems no longer in use
		menuItemBlocked.setEnabled(false);
		menuItemFollowers.setEnabled(false);
		menuItemFollowing.setEnabled(false);
	}//}}}

	//Button and menu Actions
	/**
	 * This Action is public only do to implementation it is NOT safe to call externally
	 */
	@Action
    public void showAboutBox() {//{{{
        if (aboutBox == null) {
            //JFrame mainFrame = TwitzApp.getApplication().getMainFrame();
            aboutBox = new TwitzAboutBox(getMainFrame());
            aboutBox.setLocationRelativeTo(getMainFrame());
        }
        //TwitzApp.getApplication().show(aboutBox);
		aboutBox.setVisible(true);
    }//}}}

	/**
	 * This Action is public only do to implementation it is NOT safe to call externally
	 */
	@Action
	public void showPrefsBox() {//{{{
		if(prefs == null) {
			//JFrame mainFrame = TwitzApp.getApplication().getMainFrame();
			prefs = new PreferencesDialog(getMainFrame(), true, mainApp);
			prefs.addPropertyChangeListener(mainApp);
			prefs.setLocationRelativeTo(getMainFrame());
			prefs.setSessionName(sessionName);
			prefs.setSingleSessionMode(true);
		}
		prefs.setVisible(true);
	}//}}}

	@Action
	public void loadAllPanels()//{{{
	{
		updateTabState(forceupdate);
		forceupdate = false;
//		Map map = Collections.synchronizedMap(new TreeMap());
//		map.put("async", true);
//		map.put("caller", timelinePanel);
//		//Update the timeline view.
//		eventOccurred(new TwitzEvent(this, TwitzEventType.HOME_TIMELINE, new java.util.Date().getTime(), map));
//		//Update trends view
//		map = Collections.synchronizedMap(new TreeMap());
//		map.put("async", true);
//		map.put("caller", trendPanel);
//		ArrayList args = new ArrayList();
//		args.add(1);
//		map.put("arguments", args);
//		eventOccurred(new TwitzEvent(this, TwitzEventType.LOCATION_TRENDS, new java.util.Date().getTime(), map));
//		//Load userlists view
//		map = Collections.synchronizedMap(new TreeMap());
//		map.put("async", true);
//		map.put("caller", userListMainPanel1);
//		args = new ArrayList();
//		args.add(getAuthenticatedUser().getId());//screenName
//		args.add(-1L);
//		map.put("arguments", args);
//		eventOccurred(new TwitzEvent(this, TwitzEventType.USER_LISTS, new java.util.Date().getTime(), map));
//		//Load blocked users
//		map = Collections.synchronizedMap(new TreeMap());
//		map.put("async", true);
//		map.put("caller", blocked);
//		eventOccurred(new TwitzEvent(this, TwitzEventType.BLOCKING_USERS, new java.util.Date().getTime(), map));
//		//Load followers list
//		map = Collections.synchronizedMap(new TreeMap());
//		map.put("async", true);
//		map.put("caller", followers);
//		args = new ArrayList();
//		args.add(getAuthenticatedUser().getId());//screenName
//		args.add(-1L);
//		map.put("arguments", args);
//		eventOccurred(new TwitzEvent(this, TwitzEventType.FOLLOWERS_STATUSES, new java.util.Date().getTime(), map));
//		//Load friends list
//		map = Collections.synchronizedMap(new TreeMap());
//		map.put("async", true);
//		map.put("caller", friends);
//		args = new ArrayList();
//		args.add(getAuthenticatedUser().getId());//screenName
//		args.add(-1L);
//		map.put("arguments", args);
//		eventOccurred(new TwitzEvent(this, TwitzEventType.FRIENDS_STATUSES, new java.util.Date().getTime(), map));
	}//}}}

	@Action
	private void keyReleased(java.awt.event.KeyEvent evt) {//{{{
//		int c = txtTweet.getDocument().getLength();
//		lblChars.setText((140 - c)+"");
//		if((c > 0) && (c < 141)) {
//			btnTweet.setEnabled(true);
//			lblChars.setForeground(getResourceMap().getColor("lblChars.foreground"));
//		}
//		else if(c > 140) {
//			lblChars.setForeground(Color.RED);
//			btnTweet.setEnabled(false);
//		}
//		else
//		{
//			btnTweet.setEnabled(false);
//		}
	}//}}}

	@Action
	private void keyTyped(java.awt.event.KeyEvent evt) {//{{{
		switch(evt.getKeyCode()) {
			case KeyEvent.VK_ENTER:
				//sendAsyncTweet();
			//	btnTweet.doClick();
				//sendTweetClicked().execute();
				break;
			case KeyEvent.VK_M:
				if(evt.isControlDown())
					showMiniMode();
				break;
			case KeyEvent.VK_ESCAPE:
				mainApp.toggleWindowView("down");
				break;
		}
	}//}}}

	@Action
	public void showMiniMode() {//{{{
		if(minimode) {
			fullTwitz();
		}
		else {
			miniTwitz(false);
		}
	}//}}}

	@Action
	public void viewHTMLLog()//{{{
	{
		Desktop.Action actions = Desktop.Action.BROWSE;
		if (!Desktop.isDesktopSupported())
		{
			MessageDialog msg = new MessageDialog(getMainFrame(), false);
			msg.setContentType("text/html");
			try
			{
				URI spec = SettingsManager.getConfigDirectory().toURI();
				String s = spec.toString() + "/logs/index.html";
				URL path = new URL(s);
				msg.setMessage(path);
				msg.setResizable(true);
				msg.setTitle(resourceMap.getString("LOG_WINDOW_TITLE.TEXT"));
				msg.setSize(640, 480);
				msg.setVisible(true);
				//InputStream is = this.getClass().getResourceAsStream(path);
			}
			catch (IOException ex)
			{
				logger.error(ex.getMessage(), ex);
			}
		}
		else
		{
			Desktop desktop = Desktop.getDesktop();
			URI spec = TwitzApp.getConfigDirectory().toURI();
			String s = spec.toString() + "/logs/index.html";
			URI path = null;
			try
			{
				path = new URI(s);
			}
			catch (URISyntaxException ex)
			{
				logger.error(ex.getLocalizedMessage());
			}
			if(path != null && desktop.isSupported(actions))
			{
				try
				{
					desktop.browse(path);
				}
				catch (IOException ex)
				{
					logger.error(ex.getLocalizedMessage());
				}
			}
		}
		//InputStream is = this.getClass().getResourceAsStream(path);
	}//}}}

	/**
	 * This Action is public only do to implementation it is NOT safe to call externally
	 */
	@Action
	public void closeFrame()
	{
		try
		{
			this.setClosed(true);
		}
		catch (PropertyVetoException ex)
		{
			logger.error(ex.getLocalizedMessage());
		}
	}

	public void updateTabState(boolean force)
	{
		Component c = tabPane.getSelectedComponent();
		if(logdebug)
			logger.debug("Current tab name: " + c.getName());
		if (c.equals(searchPanel))
		{
			tweetBox.setVisible(false);
		}
		else
		{
			tweetBox.setVisible(true);
		}
		if (c.equals(recentPane))
		{
			timelinePanel.update(force);
			trendPanel.update(force);
		}
		else if (c.equals(friendsPanel))
		{
			Component f = friendsPane.getSelectedComponent();
			if (f.equals(friends))
			{
				friends.update(force);
			}
			else if (f.equals(userListMainPanel1))
			{
				userListMainPanel1.update(force);
			}
			else if (f.equals(followers))
			{
				followers.update(force);
			}
			else if (f.equals(blocked))
			{
				blocked.update(force);
			}
		}
		
	}

	//Private methods
	/**
	 * I use the netbeans gui builder to layout the main forms for this application
	 * for some reason netbeans does not recognize  my beans so I setup the layout myself
	 * after the elements are created.
	 */
	private void updateLayout()//{{{
	{
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                    .addComponent(tweetBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tweetBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
	}//}}}

	private boolean isUser(Object obj) {
		return (obj instanceof User);
	}

	private boolean isUserArray(Object obj) {
		return (obj instanceof User[]);
	}

	private boolean isStatus(Object obj) {
		return (obj instanceof Status);
	}

	private boolean isStatusArray(Object obj) {
		return (obj instanceof Status[]);
	}

	private boolean isTweet(Object obj)
	{
		return (obj instanceof Tweet);
	}

	private boolean isTweetArray(Object obj)
	{
		return (obj instanceof Tweet[]);
	}

	private String getScreenNameFromMap(Object obj) {//{{{
		String screenName = "";
		User u = null;
		if (isUserArray(obj))
		{
			if(logdebug)
				logger.debug("Found User array");
			User[] users = (User[]) obj;
			screenName = users[0].getScreenName();
		}
		else if (isStatusArray(obj))
		{
			if(logdebug)
				logger.debug("Found Status array");
			Status[] stat = (Status[]) obj;
			u = stat[0].getUser();
			screenName = u.getScreenName();
		}
		else if (isUser(obj))
		{
			u = (User) obj;
			screenName = u.getScreenName();
		}
		else if (isStatus(obj))
		{
			Status stat = (Status) obj;
			u = stat.getUser();
			screenName = u.getScreenName();
		}
		else if(isTweet(obj))
		{
			Tweet t = (Tweet)obj;
			screenName = t.getFromUser();
		}
		else if(isTweetArray(obj))
		{
			Tweet[] t = (Tweet[])obj;
			screenName = t[0].getFromUser();
		}
		return screenName;
	}//}}}

	private Vector<String> getScreenNamesFromMap(Object obj) {//{{{
		String screenName = "";
		Vector<String> rv = new Vector<String>();
		User u = null;
		if (isUserArray(obj))
		{
			User[] users = (User[]) obj;
			if(users.length >= 2) {
				rv.addElement(users[0].getScreenName());
				rv.addElement(users[1].getScreenName());
			}
		}
		else if (isStatusArray(obj))
		{
			Status[] stat = (Status[]) obj;
			if(stat.length >= 2) {
				u = stat[0].getUser();
				rv.addElement(u.getScreenName());
				u = stat[1].getUser();
				rv.addElement(u.getScreenName());
			}
		}
		else if(isTweetArray(obj))
		{
			Tweet[] t = (Tweet[]) obj;
			if(t.length >= 2)
			{
				rv.addElement(t[0].getFromUser());
				rv.addElement(t[1].getFromUser());
			}
		}

		return rv;
	}//}}}

	private User getUserFromMap(Object obj) {//{{{
		//String screenName = "";
		User u = null;
		if (isUserArray(obj))
		{
			if(logdebug)
				logger.debug("Found User array");
			User[] users = (User[]) obj;
			u = users[0];
		}
		else if (isStatusArray(obj))
		{
			if(logdebug)
				logger.debug("Found Status array");
			Status[] stat = (Status[]) obj;
			u = stat[0].getUser();
			//screenName = u.getScreenName();
		}
		else if (isUser(obj))
		{
			u = (User) obj;
			//screenName = u.getScreenName();
		}
		else if (isStatus(obj))
		{
			Status stat = (Status) obj;
			u = stat.getUser();
			//screenName = u.getScreenName();
		}
		else if(isTweet(obj))
		{
			Tweet t = (Tweet)obj;
			//Note this should not be used for anything other than
			// screenname, id and profile_url
			// TODO: replace this with a call to Twitter.showUser();
			TwitzBusyPane blocker = new TwitzBusyPane(this, null);
			blocker.setLabelText(resourceMap.getString("SHOW_USER"));
			blocker.block();
			Twitter tw = this.twitterManager.getTwitterInstance();
			try
			{
				u = tw.showUser(t.getFromUser());
			}
			catch (TwitterException ex)
			{
				logger.error(ex.getLocalizedMessage());
			}
//			UserTest fakeUser = new UserTest(t.getFromUser(), t.getProfileImageUrl());
//			u = fakeUser;
			blocker.unblock();
		}
		else if(isTweetArray(obj))
		{
			Tweet[] t = (Tweet[])obj;
			TwitzBusyPane blocker = new TwitzBusyPane(this, null);
			blocker.setLabelText(resourceMap.getString("SHOW_USER"));
			blocker.block();
			Twitter tw = this.twitterManager.getTwitterInstance();
			try
			{
				u = tw.showUser(t[0].getFromUser());
			}
			catch (TwitterException ex)
			{
				logger.error(ex.getLocalizedMessage());
			}
			blocker.unblock();
//			UserTest fakeUser = new UserTest(t[0].getFromUser(), t[0].getProfileImageUrl());
//			u = fakeUser;
		}
		return u;
	}//}}}

	private Vector<User> getUsersFromMap(Object obj) {//{{{
		//String screenName = "";
		Vector<User> rv = new Vector<User>();
		User u = null;
		if (isUserArray(obj))
		{
			User[] users = (User[]) obj;
			if(users.length >= 2) {
				rv.addElement(users[0]);
				rv.addElement(users[1]);
			}
		}
		else if (isStatusArray(obj))
		{
			Status[] stat = (Status[]) obj;
			if(stat.length >= 2) {
				u = stat[0].getUser();
				rv.addElement(u);
				u = stat[1].getUser();
				rv.addElement(u);
			}
		}
		else if(isTweetArray(obj))
		{
			//Note this should not be used for anything other than
			// screenname, id and profile_url
			// TODO: replace this with a call to Twitter.showUser();
			Tweet[] t = (Tweet[])obj;
			if(t.length >= 2)
			{
				TwitzBusyPane blocker = new TwitzBusyPane(this, null);
				blocker.setLabelText(resourceMap.getString("SHOW_USER"));
				blocker.block();
				Twitter tw = this.twitterManager.getTwitterInstance();
				try
				{
					u = tw.showUser(t[0].getFromUser());
					rv.addElement(u);
					u = tw.showUser(t[1].getFromUser());
					rv.addElement(u);
				}
				catch (TwitterException ex)
				{
					logger.error(ex.getLocalizedMessage());
				}
				blocker.unblock();
//				UserTest fakeUser = new UserTest(t[0].getFromUser(), t[0].getProfileImageUrl());
//				rv.addElement(fakeUser);
//				fakeUser = new UserTest(t[1].getFromUser(), t[1].getProfileImageUrl());
//				rv.addElement(fakeUser);
			}
		}

		return rv;
	}//}}}

	private void addSampleData() {//{{{
		StatusListModel dm = timelinePanel.getStatusList().getModel();
		//TODO: Test code to be removed in production
		for (int i=0; i < 10; i++) {
			dm.addStatus(new StatusTest(i));
		}

		trendPanel.addTrend(new TrendTest());
		trendPanel.addTrend(new TrendTest());
		trendPanel.addTrend(new TrendTest());
//		timelinePanel.getStatusList().setFixedCellHeight(120);

		User[] ouser = new User[]{
			new UserTest("Python"),
			new UserTest("Ladybug"),
			new UserTest("perry")
		};


		User[] puser = new User[]{
			new UserTest("cansport"),
			new UserTest("CNN News"),
			new UserTest("Abc News"),
			new UserTest("Nbc Online"),
			new UserTest("Black Power gen"),
			new UserTest("Facts of Life"),
			new UserTest("black_rino")
		};
//		UserListTest(int id, String name, String fullName,
//			String slug, String desc, int subCount,
//			int memberCount, boolean pub, User user)
		UserListTest ult = new UserListTest(1, "List 1", "List 1 Testing",
				"this is a slug", "this describes the list", 0, 7, true, new UserTest());
		UserListTest ult1 = new UserListTest(2, "List 2", "List 1 Testing",
				"this is a slug", "this describes the list", 0, 7, true, new UserTest());
		UserListTest ult2 = new UserListTest(3, "News Networks", "List 1 Testing",
				"this is a slug", "this describes the list", 0, 7, true, new UserTest());
		UserListTest ult3 = new UserListTest(4, "List 4", "List 1 Testing",
				"this is a slug", "this describes the list", 0, 7, true, new UserTest());
		UserListTest ult4 = new UserListTest(5, "Mizer Ball", "List 1 Testing",
				"this is a slug", "this describes the list", 0, 7, true, new UserTest());
		UserListTest ult5 = new UserListTest(6, "List 6", "List 1 Testing",
				"this is a slug", "this describes the list", 0, 7, true, new UserTest());
//		UserListPanel pnl = userListMainPanel1.addUserList(ult);
//		pnl.addUser(ouser);
//		UserListPanel pnl1 = userListMainPanel1.addUserList(ult1);
//		pnl1.addUser(puser);
//		UserListPanel pnl2 = userListMainPanel1.addUserList(ult2);
//		pnl2.addUser(puser);
//		UserListPanel pnl3 = userListMainPanel1.addUserList(ult3);
//		pnl3.addUser(puser);
//		UserListPanel pnl4 = userListMainPanel1.addUserList(ult4);
//		pnl4.addUser(puser);
//		UserListPanel pnl5 = userListMainPanel1.addUserList(ult5);
//		pnl5.addUser(puser);

		UserListBox pnl = userListMainPanel1.addUserList(ult);
		pnl.addUser(ouser);
		UserListBox pnl1 = userListMainPanel1.addUserList(ult1);
		pnl1.addUser(puser);
		UserListBox pnl2 = userListMainPanel1.addUserList(ult2);
		pnl2.addUser(puser);
		UserListBox pnl3 = userListMainPanel1.addUserList(ult3);
		pnl3.addUser(puser);
		UserListBox pnl4 = userListMainPanel1.addUserList(ult4);
		pnl4.addUser(puser);
		UserListBox pnl5 = userListMainPanel1.addUserList(ult5);
		pnl5.addUser(puser);

		friends.addUser(ouser);
		blocked.addUser(ouser);
		followers.addUser(puser);
//		userListMainPanel1.addUserList(ouser, "Panel 1");
//		userListMainPanel1.addUserList(puser, "Panel 2");
//		userListMainPanel1.addUserList(puser, "Mizer Ball");
//		userListMainPanel1.addUserList(puser, "News Networks");
//		userListMainPanel1.addUserList(puser, "Panel 5");

	}//}}}

	private JMenu createTabPositionMenu() {//{{{
		ButtonGroup g = new ButtonGroup();
		JMenu rv = new JMenu(getResourceMap().getString("menuTabPosition.text"));
	//	rv.setActionCommand();
	//	rv.addActionListener(this);
		rv.setIcon(getResourceMap().getIcon("icon.tab_go"));

//		Top
		JCheckBoxMenuItem item = new JCheckBoxMenuItem(getResourceMap().getString("menuItemTabUp.text"));
		item.setActionCommand("tabs_up");
		item.addActionListener(this);
		item.setIcon(getResourceMap().getIcon("icon.arrow_up"));
		item.setSelected(config.getString("tab_position").equals("north"));
		rv.add(item);
		g.add(item);

//		Bottom
		item = new JCheckBoxMenuItem(getResourceMap().getString("menuItemTabDown.text"));
		item.setActionCommand("tabs_down");
		item.addActionListener(this);
		item.setIcon(getResourceMap().getIcon("icon.arrow_down"));
		item.setSelected(config.getString("tab_position").equals("south"));
		rv.add(item);
		g.add(item);

//		Right
		item = new JCheckBoxMenuItem(getResourceMap().getString("menuItemTabRight.text"));
		item.setActionCommand("tabs_right");
		item.addActionListener(this);
		item.setIcon(getResourceMap().getIcon("icon.arrow_right"));
		item.setSelected(config.getString("tab_position").equals("east"));
		rv.add(item);
		g.add(item);

//		Left
		item = new JCheckBoxMenuItem(getResourceMap().getString("menuItemTabLeft.text"));
		item.setActionCommand("tabs_left");
		item.addActionListener(this);
		item.setIcon(getResourceMap().getIcon("icon.arrow_left"));
		item.setSelected(config.getString("tab_position").equals("west"));
		rv.add(item);
		g.add(item);

		return rv;
	}//}}}

	private JMenu createActionsMenu() {//{{{
		JMenu menu = new JMenu();
		JMenu users = new JMenu(resourceMap.getString("ACTIONS_MENU.TEXT"));
		//java.awt.Component selected = tabPane.getSelectedComponent();
		JPopupMenu actions = getActionsMenu(timelinePanel);
		MenuElement[] aelems = actions.getSubElements();
		for (MenuElement e : aelems) {
			if(e instanceof JMenuItem) {
				users.add((JMenuItem)e);
			}
			else if(e instanceof JMenu) {
				users.add((JMenu)e);
			}
		}

		menu.addMenuListener(new MenuListener() {//{{{

			public void menuSelected(MenuEvent e)
			{
//				//System.out.println("Menu Selected");
//				java.awt.Component o = tabPane.getSelectedComponent();
//				Component c = actionsMenu.getMenuComponent(0);
//				if(o.getName().equals("recentPane")) {
//					if(recentList.getSelectedRow() == -1)
//						c.setEnabled(false);
//					else
//						c.setEnabled(true);
//				}
//				else if(o.getName().equals("friendsPanel")) {
//					if(friends.getSelectedIndex() == -1)
//						c.setEnabled(false);
//					else
//						c.setEnabled(true);
//				}
//				else if(o.getName().equals("followingPane")) {
//					if(followingList.getSelectedIndex() == -1)
//						c.setEnabled(false);
//					else
//						c.setEnabled(true);
//				}
//				else if(o.getName().equals("followersPane")) {
//					if(followersList.getSelectedIndex() == -1)
//						c.setEnabled(false);
//					else
//						c.setEnabled(true);
//				}
//				else if(o.getName().equals("blockedPane")) {
//					if(blockedList.getSelectedIndex() == -1)
//						c.setEnabled(false);
//					else
//						c.setEnabled(true);
//				}
			}

			public void menuDeselected(MenuEvent e)
			{
				//throw new UnsupportedOperationException("Not supported yet.");
			}

			public void menuCanceled(MenuEvent e)
			{
				//throw new UnsupportedOperationException("Not supported yet.");
			}
		});//}}}
		menu.add(users);
		//Setup menus for all other twitter actions
		return menu;
	}//}}}

	private void setTabPlacement() {//{{{
		//JTabbedPane.TOP JTabbedPane.BOTTOM JTabbedPane.LEFT JTabbedPane.RIGHT
		if(config.getString("tab_position").equals("north")) {
			tabPane.setTabPlacement(JTabbedPane.TOP);
		}
		else if(config.getString("tab_position").equals("south")) {
			tabPane.setTabPlacement(JTabbedPane.BOTTOM);
		}
		else if(config.getString("tab_position").equals("east")) {
			tabPane.setTabPlacement(JTabbedPane.RIGHT);
		}
		else if(config.getString("tab_position").equals("west")) {
			tabPane.setTabPlacement(JTabbedPane.LEFT);
		}
	}//}}}

	private void setAuthenticatedUser(User userTest)
	{
		this.authenticatedUser = userTest;
	}
	//END private methods

	//Public methods
	public User getAuthenticatedUser()
	{
		return this.authenticatedUser;
	}

	public javax.swing.JTextField getTweetField()
	{
		return tweetBox.getTweetField(); //this.txtTweet;
	}

	public boolean initTwitter() //{{{
	{
		//Initialize twitter
		getTwitterManager();
		resource = TwitzApp.getContext().getResourceMap(twitz.twitter.TwitterManager.class);

		TwitzLogin worker = new TwitzLogin(this);
		worker.addPropertyChangeListener(statusListener);
		worker.start();
		return connected;
	}//}}}

	class TwitzLogin extends SwingWorker //{{{
	{

		boolean online = false;
		boolean error = false;
		TwitterException tec;
		TwitzBusyPane busyPane;
		Component glassPane;
		JInternalFrame frame;
		ResourceMap resource = TwitzApp.getContext().getResourceMap(twitz.twitter.TwitterManager.class);
		private User validatedUser;

		public TwitzLogin(JInternalFrame frame)
		{
			this.frame = frame;
			this.busyPane  = new TwitzBusyPane(frame, this);
		}

		public void start()
		{
			firePropertyChange("started", null, "Starting twitter connection task");
			message("Starting twitter connection task");
			busyPane.block();
			execute();
		}

		private void message(String msg, Object... args)
		{
			if (args.length == 0)
			{
				firePropertyChange("message", null, msg);
			}
			else
			{
				firePropertyChange("message", null, String.format(msg, args));
			}
		}

		public Void doInBackground()
		{
			try
			{
				message("Looking for network connection to twitter.com");
				twitterManager.login();
				online = twitterManager.getTwitterInstance().test();
			}
			catch (TwitterException te)
			{
				logger.error(te);
				online = false;
				message("No connection found to twitter.com");
				return null;
			}
			//TODO modify this for when OAuth is being used
			if(config.getBoolean(DBManager.SESSION_TWITTER_OAUTH))
			{
				AccessToken token = config.getAccessToken();
				//TODO nedds I18N
				message("Attempting to verify credentials for %s", token == null ? "Unknown User" : token.getScreenName());
			}
			else
			{
				message("Attempting to verify credentials for %s", config.getString(DBManager.SESSION_TWITTER_ID));
			}
			
			try
			{
				validatedUser = twitterManager.getTwitterInstance().verifyCredentials();
			}
			catch (TwitterException te)
			{
				if (te.getStatusCode() == 401)
				{
					//Authentication incorrect
					tec = te;
					online = false;
					error = true;
				}
			}
			return null;
		}

		@Override
		public void done()
		{
			busyPane.unblock();
			if (error)
			{
				setConnected(false);
				message("Incorrect username or password");
				displayError(tec, "Login Error", "Incorrect username or password", null, true);
			}
			else
			{
				setConnected(online);

				if (online)
				{
					setAuthenticatedUser(validatedUser);
					loadAllPanels();
				}
				else if (DEVMODE)
				{
					setAuthenticatedUser(new UserTest());
					addSampleData();
				}
			}
			
			firePropertyChange("done", null, null);
		}

		public void cancelled()
		{

		}


	}//}}}

	public void setConnected(boolean c)
	{
		boolean old = connected;
		logger.debug("Connected changed --------- "+c+" --------------------");
		connected = c;
		forceupdate = c;
		if(DEVMODE)
			timelinePanel.setConnectButtonVisible(c);
		else
			timelinePanel.setConnectButtonVisible(!c);
		firePropertyChange("connected", old, c);
	}

	public boolean isConnected() 
	{
		return connected;
	}

	public void setTwitterManager(TwitterManager t)
	{
		if(t != null)
		{
			TwitterManager old = twitterManager;
			this.twitterManager = t;
			firePropertyChange("twitterManager", old, t);
		}
	}

	public TwitterManager getTwitterManager()
	{
		//It is null before initTwitter is run
		if(twitterManager == null)
		{
			twitterManager = new TwitterManager(sessionName);
			twitterManager.addTwitzListener(this);
		}
		return twitterManager;
	}

	public java.beans.PropertyChangeListener getStatusListener()
	{
		return statusListener;
	}

	public String getSessionName()
	{
		return this.sessionName;
	}

	/**
	 * For development purposes ONLY
	 */
	public void addSampleFriends(javax.swing.JComponent caller)
	{
		if(DEVMODE)
		{
			StatusListModel mod = (StatusListModel) friendsStatusPanel.getStatusList().getModel();
			mod.clear();
			for (int i = 0; i < 10; i++)
			{
				mod.addStatus(new StatusTest(i));
			}
//			RelationshipDialog rd = new RelationshipDialog(getMainFrame(), true);
//			rd.setRelationship(new RelationshipTest());
//			rd.setLocationRelativeTo(this);
//			rd.setVisible(true);
//			new BlockTest(caller).start();
		}

	}

	private class BlockTest extends SwingWorker
	{
		private final javax.swing.JComponent frame;
		private final TwitzBusyPane busy;
		public BlockTest(javax.swing.JComponent f)
		{
			this.frame = f;
			this.busy = new TwitzBusyPane(frame, this);
		}

		public void start()
		{
			busy.block();
		}

		protected Object doInBackground()
		{
			while(!isCancelled())
			{
				try
				{
					Thread.sleep(3000);
				}
				catch (InterruptedException ex)
				{
					java.util.logging.Logger.getLogger(TwitzMainView.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
			return null;
		}

		@Override
		protected void done()
		{
			busy.unblock();
		}
	}

	/**
	 * For development purposes ONLY
	 */
	public User[] getSampleListUsers(int which)//{{{
	{
		User[] rv = new User[0];

		User[] ouser = new User[]{
			new UserTest("Python"),
			new UserTest("Ladybug"),
			new UserTest("perry")
		};

		User[] puser = new User[]{
			new UserTest("cansport"),
			new UserTest("CNN News"),
			new UserTest("Abc News"),
			new UserTest("Nbc Online"),
			new UserTest("Black Power gen"),
			new UserTest("Facts of Life"),
			new UserTest("black_rino")
		};
		switch(which)
		{
			case 0:
				rv = ouser;
			break;
			case 1:
				rv = puser;
			break;
		}
		return rv;
	}//}}}

	/**
	 * Method builds the Action menu that is displayed application wide
	 * when a user is clicked on.
	 * @return A JPopupMenu
	 */
	public JPopupMenu getActionsMenu(Component caller)
	{//{{{
//RETWEETED_BY_ME
//RETWEETED_TO_ME
//RETWEETS_OF_ME
//SHOW_STATUS
//SHOW_USER
		ContactsList cl = null;
		StatusList tl = null;
		UserListPanel ulp = null;
		UserListBox ulb = null;
		StatusPanel sp = null;
		SearchPanel search = null;
		TimeLinePanel tlp = null;
		FriendsPanel fp = null;
		BlockedPanel bp = null;
		FollowersPanel flp = null;

		//ActionListener actions = null;
		//javax.swing.JComponent actions = null;
		javax.swing.ActionMap aMap = null;

		boolean selected = true;
		boolean isBlock = false;
		boolean status = false;
		if(caller != null)
		{
			if (caller instanceof JTable)
			{
				JTable t = (JTable) caller;
				if (t.getSelectedRow() == -1)
				{
					selected = false;
				}
				aMap = TwitzApp.getContext().getActionMap(t.getClass(), t);
			}
			else if (caller instanceof ContactsList)
			{
				ContactsList l = (ContactsList) caller;
				cl = (ContactsList) caller;
				if (l.getSelectedIndex() == -1)
				{
					selected = false;
				}
				aMap = TwitzApp.getContext().getActionMap(cl.getClass(), cl);
			}
			else if (caller instanceof UserListPanel)
			{
				//caller = (UserListPanel)caller;
				ContactsList l = ((UserListPanel) caller).getContactsList();
				ulp = (UserListPanel) caller;
				if (l.getSelectedIndex() == -1)
				{
					selected = false;
				}
				aMap = TwitzApp.getContext().getActionMap(ulp.getClass(), ulp);
				//actions = ulp;
			}
			else if (caller instanceof UserListBox)
			{
				//caller = (UserListPanel)caller;
				ContactsList l = ((UserListBox) caller).getContactsList();
				ulb = (UserListBox) caller;
				if (l.getSelectedIndex() == -1)
				{
					selected = false;
				}
				aMap = TwitzApp.getContext().getActionMap(ulb.getClass(), ulb);
				//actions = ulp;
			}
			else if (caller instanceof StatusList)
			{
				tl = (StatusList) caller;
				if (tl.getSelectedIndex() == -1)
				{
					selected = false;
				}
				else
					status = true;
				aMap = TwitzApp.getContext().getActionMap(tl.getClass(), tl);
				//actions = tl;
			}
			else if(caller instanceof StatusPanel)
			{
				sp = (StatusPanel)caller;
				if(sp.getStatusList().getSelectedIndex() == -1)
				{
					selected = false;
				}
				else
					status = true;
				aMap = TwitzApp.getContext().getActionMap(sp.getClass(), sp);
				//actions = sp;
			}
			else if(caller instanceof SearchPanel)
			{
				search = (SearchPanel)caller;
				if(search.getSelectedList().getSelectedIndex() == -1)
				{
					selected = false;
				}
				aMap = TwitzApp.getContext().getActionMap(search.getClass(), search);
			}
			else if(caller instanceof TimeLinePanel)
			{
				tlp = (TimeLinePanel)caller;
				if(tlp.getStatusList().getSelectedIndex() == -1)
				{
					selected = false;
				}
				else
					status = true;
				aMap = TwitzApp.getContext().getActionMap(tlp.getClass(), tlp);
				//actions = tlp;
			}
			else if(caller instanceof FriendsPanel)
			{
				fp = (FriendsPanel)caller;
				if(fp.getContactsList().getSelectedIndex() == -1)
				{
					selected = false;
				}
				aMap = TwitzApp.getContext().getActionMap(fp.getClass(), fp);
				//actions = fp;
			}
			else if(caller instanceof BlockedPanel)
			{
				bp = (BlockedPanel)caller;
				if(bp.getContactsList().getSelectedIndex() == -1)
				{
					selected = false;
				}
				selected = false;
				isBlock = true;
				aMap = TwitzApp.getContext().getActionMap(bp.getClass(), bp);
				//actions = bp;
			}
			else if(caller instanceof FollowersPanel)
			{
				flp = (FollowersPanel)caller;
				if(flp.getContactsList().getSelectedIndex() == -1)
				{
					selected = false;
				}
				aMap = TwitzApp.getContext().getActionMap(flp.getClass(), flp);
				//actions = flp;
			}
		}
		JPopupMenu menu = new JPopupMenu(getResourceMap().getString("ACTIONS"));
		menu.setFocusable(false);
		menu.setLabel(getResourceMap().getString("ACTIONS"));

		JMenuItem item = new JMenuItem(getResourceMap().getString("REPORT_SPAM"));
		//TwitzApp.getContext().getActionMap(TwitzDesktopFrame.class, this);
		//item.setActionCommand(TwitterConstants.REPORT_SPAM+"");
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
		}
		item.setActionCommand("REPORT_SPAM");
		item.setIcon(getResourceMap().getIcon("icon.bomb"));
		item.setText(getResourceMap().getString("REPORT_SPAM"));
		if(isBlock)
			item.setEnabled(isBlock);
		else
			item.setEnabled(selected);
		item.setFocusable(false);
		menu.add(item);
		menu.addSeparator();

		JMenu sub = new JMenu(getResourceMap().getString("BLOCKING_USERS"));
		sub.setIcon(getResourceMap().getIcon("icon.stop"));
		sub.setFocusable(false);
		item = new JMenuItem(getResourceMap().getString("CREATE_BLOCK"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
			//item.addActionListener(actions);
		}
		item.setActionCommand("CREATE_BLOCK");
		item.setIcon(getResourceMap().getIcon("icon.stop"));
		item.setText(getResourceMap().getString("CREATE_BLOCK"));
		item.setEnabled(selected);
		item.setFocusable(false);
		sub.add(item);

		item = new JMenuItem(getResourceMap().getString("DESTROY_BLOCK"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
			//item.addActionListener(actions);
		}
		item.setActionCommand("DESTROY_BLOCK");
		item.setText(getResourceMap().getString("DESTROY_BLOCK"));
		item.setIcon(getResourceMap().getIcon("icon.stop"));
		if(isBlock)
			item.setEnabled(isBlock);
		else
			item.setEnabled(selected);
		item.setFocusable(false);
		sub.add(item);
		menu.add(sub);

		sub = new JMenu(getResourceMap().getString("FRIENDSHIPS"));
		sub.setIcon(getResourceMap().getIcon("icon.user"));
		sub.setFocusable(false);
		item = new JMenuItem(getResourceMap().getString("CREATE_FRIENDSHIP"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
			//item.addActionListener(actions);
		}
		item.setActionCommand("CREATE_FRIENDSHIP");
		item.setIcon(getResourceMap().getIcon("icon.user_add"));
		item.setText(getResourceMap().getString("CREATE_FRIENDSHIP"));
		item.setEnabled(selected);
		item.setFocusable(false);
		sub.add(item);

		item = new JMenuItem(getResourceMap().getString("DESTROY_FRIENDSHIP"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
			//item.addActionListener(actions);
		}
		item.setActionCommand("DESTROY_FRIENDSHIP");
		item.setIcon(getResourceMap().getIcon("icon.user_delete"));
		item.setText(getResourceMap().getString("DESTROY_FRIENDSHIP"));
		item.setEnabled(selected);
		item.setFocusable(false);
		sub.add(item);

		item = new JMenuItem(getResourceMap().getString("EXISTS_FRIENDSHIP"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
			//item.addActionListener(actions);
		}
		item.setActionCommand("EXISTS_FRIENDSHIP");
		item.setIcon(getResourceMap().getIcon("icon.user_go"));
		item.setText(getResourceMap().getString("EXISTS_FRIENDSHIP"));
		item.setEnabled(selected);
		item.setFocusable(false);
		sub.add(item);

		item = new JMenuItem(getResourceMap().getString("SHOW_FRIENDSHIP"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
			//item.addActionListener(actions);
		}
		item.setActionCommand("SHOW_FRIENDSHIP");
		item.setIcon(getResourceMap().getIcon("icon.user_gray"));
		item.setText(getResourceMap().getString("SHOW_FRIENDSHIP"));
		item.setEnabled(selected);
		item.setFocusable(false);
		sub.add(item);
		menu.add(sub);
//FAVORITE
		sub = new JMenu(getResourceMap().getString("FAVORITES"));
		sub.setIcon(getResourceMap().getIcon("icon.heart"));
		sub.setFocusable(false);
		item = new JMenuItem(getResourceMap().getString("CREATE_FAVORITE"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
			//item.addActionListener(actions);
		}
		item.setActionCommand("CREATE_FAVORITE");
		item.setIcon(getResourceMap().getIcon("icon.heart_add"));
		item.setText(getResourceMap().getString("CREATE_FAVORITE"));
		item.setEnabled(status);
		item.setFocusable(false);
		sub.add(item);

		item = new JMenuItem(getResourceMap().getString("DESTROY_FAVORITE"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
			//item.addActionListener(actions);
		}
		item.setActionCommand("DESTROY_FAVORITE");
		//item.addActionListener(actions);
		item.setIcon(getResourceMap().getIcon("icon.heart_delete"));
		item.setText(getResourceMap().getString("DESTROY_FAVORITE"));
		item.setEnabled(status);
		item.setFocusable(false);
		sub.add(item);
		menu.add(sub);

//SENT_DIRECT_MESSAGES
//SEND_DIRECT_MESSAGE
		sub = new JMenu(getResourceMap().getString("DIRECT_MESSAGES"));
		sub.setIcon(getResourceMap().getIcon("icon.user_comment"));
		sub.setFocusable(false);
		item = new JMenuItem(getResourceMap().getString("SEND_DIRECT_MESSAGE"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
			//item.addActionListener(actions);
		}
		item.setActionCommand("SEND_DIRECT_MESSAGE");
		item.setIcon(getResourceMap().getIcon("icon.user_comment"));
		item.setText(getResourceMap().getString("SEND_DIRECT_MESSAGE"));
		item.setEnabled(selected);
		item.setFocusable(false);
		sub.add(item);

//		item = new JMenuItem(getResourceMap().getString("SEND_DIRECT_MESSAGES"));
//		item.setActionCommand(TwitterConstants.SEND_DIRECT_MESSAGES+"");
//		if(cl != null) { 			item.addActionListener(cl); 		} else if(ulp != null) { 			item.addActionListener(ulp); 		} 		else if(tl != null) { 			item.addActionListener(tl); 		}
//		item.setIcon(getResourceMap().getIcon("icon.user_comment"));
//		item.setEnabled(selected);
//		sub.add(item);
		menu.add(sub);
//NEAR_BY_PLACES
//GEO_DETAILS

//		sub = new JMenu(getResourceMap().getString("LOCATION"));
//		sub.setIcon(getResourceMap().getIcon("icon.map"));
//		sub.setFocusable(false);
//		item = new JMenuItem(getResourceMap().getString("NEAR_BY_PLACES"));
//		if(aMap != null) {
//			item.setAction(aMap.get("menuAction"));
//			//item.addActionListener(actions);
//		}
//		item.setActionCommand("NEAR_BY_PLACES");
//		item.setIcon(getResourceMap().getIcon("icon.map"));
//		item.setText(getResourceMap().getString("NEAR_BY_PLACES"));
//		item.setEnabled(selected);
//		item.setFocusable(false);
//		sub.add(item);
//
//		item = new JMenuItem(getResourceMap().getString("GEO_DETAILS"));
//		if(aMap != null) {
//			item.setAction(aMap.get("menuAction"));
//			//item.addActionListener(actions);
//		}
//		item.setActionCommand("GEO_DETAILS");
//		//item.addActionListener(actions);
//		item.setIcon(getResourceMap().getIcon("icon.map_edit"));
//		item.setText(getResourceMap().getString("GEO_DETAILS"));
//		item.setEnabled(selected);
//		item.setFocusable(false);
//		sub.add(item);
//		menu.add(sub);

//ADD_LIST_MEMBER
//DELETE_LIST_MEMBER
//CHECK_LIST_MEMBERSHIP
		sub = new JMenu(getResourceMap().getString("USER_LISTS"));
		sub.setIcon(getResourceMap().getIcon("icon.group"));
		sub.setFocusable(false);
		item = new JMenuItem(getResourceMap().getString("CREATE_USER_LIST"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
			//item.addActionListener(actions);
		}
		item.setActionCommand("CREATE_USER_LIST");
		//item.addActionListener(actions);
		item.setIcon(getResourceMap().getIcon("icon.group_add"));
		item.setText(getResourceMap().getString("CREATE_USER_LIST"));
		item.setEnabled(selected);
		item.setFocusable(false);
		sub.add(item);

		item = new JMenuItem(getResourceMap().getString("DELETE_USER_LIST"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
			//item.addActionListener(actions);
		}
		item.setActionCommand("DELETE_USER_LIST");
		//item.addActionListener(actions);
		item.setIcon(getResourceMap().getIcon("icon.group_add"));
		item.setText(getResourceMap().getString("DELETE_USER_LIST"));
		item.setEnabled(selected);
		item.setFocusable(false);
		sub.add(item);

		item = new JMenuItem(getResourceMap().getString("ADD_LIST_MEMBER"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
			//item.addActionListener(actions);
		}
		item.setActionCommand("ADD_LIST_MEMBER");
		//item.addActionListener(actions);
		item.setIcon(getResourceMap().getIcon("icon.group_add"));
		item.setText(getResourceMap().getString("ADD_LIST_MEMBER"));
		item.setEnabled(selected);
		item.setFocusable(false);
		sub.add(item);

		item = new JMenuItem(getResourceMap().getString("DELETE_LIST_MEMBER"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
			//item.addActionListener(actions);
		}
		item.setActionCommand("DELETE_LIST_MEMBER");
		item.setIcon(getResourceMap().getIcon("icon.group_delete"));
		item.setText(getResourceMap().getString("DELETE_LIST_MEMBER"));
		item.setEnabled(selected);
		item.setFocusable(false);
		sub.add(item);

		item = new JMenuItem(getResourceMap().getString("CHECK_LIST_MEMBERSHIP"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
			//item.addActionListener(actions);
		}
		item.setActionCommand("CHECK_LIST_MEMBERSHIP");
		item.setIcon(getResourceMap().getIcon("icon.group_link"));
		item.setText(getResourceMap().getString("CHECK_LIST_MEMBERSHIP"));
		item.setEnabled(selected);
		item.setFocusable(false);
		sub.add(item);
		menu.add(sub);
//NOTIFICATIONS
		sub = new JMenu(getResourceMap().getString("NOTIFICATIONS"));
		sub.setIcon(getResourceMap().getIcon("icon.transmit"));
		sub.setFocusable(false);
		item = new JMenuItem(getResourceMap().getString("ENABLE_NOTIFICATION"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
		}
		item.setActionCommand("ENABLE_NOTIFICATION");
		item.setIcon(getResourceMap().getIcon("icon.transmit_add"));
		item.setText(getResourceMap().getString("ENABLE_NOTIFICATION"));
		item.setEnabled(selected);
		item.setFocusable(false);
		sub.add(item);

		item = new JMenuItem(getResourceMap().getString("DISABLE_NOTIFICATION"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
		}
		item.setActionCommand("DISABLE_NOTIFICATION");
		item.setIcon(getResourceMap().getIcon("icon.transmit_delete"));
		item.setText(getResourceMap().getString("DISABLE_NOTIFICATION"));
		item.setEnabled(selected);
		item.setFocusable(false);
		sub.add(item);
	//USER_TIMELINE
		item = new JMenuItem(getResourceMap().getString("USER_TIMELINE"));
		if(aMap != null) {
			item.setAction(aMap.get("menuAction"));
			//item.addActionListener(actions);
		}
		item.setActionCommand("USER_TIMELINE");
		item.setIcon(getResourceMap().getIcon("icon.timeline_marker"));
		item.setText(getResourceMap().getString("USER_TIMELINE"));
		item.setEnabled(selected);
		item.setFocusable(false);
		menu.add(item);

		//menu.setEnabled(selected);

		return menu;
	}//}}}
	
	public void toggleTabs(java.awt.event.ActionEvent evt)
	{//{{{
		if (evt.getSource() instanceof javax.swing.JCheckBoxMenuItem)
		{
			javax.swing.JCheckBoxMenuItem item = (javax.swing.JCheckBoxMenuItem) evt.getSource();
			int index = tabPane.getTabCount();
			if (evt.getActionCommand().equals("Friends"))
			{
				config.setProperty("tab_friends", item.isSelected() + "");
				if (item.isSelected())
				{
					tabPane.insertTab(getResourceMap().getString("friendsPanel.TabConstraints.tabTitle"), getResourceMap().getIcon("friendsPanel.TabConstraints.tabIcon"), friendsPanel, getResourceMap().getString("friendsPanel.TabConstraints.tabTooltip"), 1);
					tabPane.setSelectedComponent(friendsPanel);
					//setTabComponent();
				}
				else
				{
					tabPane.remove(friendsPanel);
				}
			}
			else if (evt.getActionCommand().equals("Blocked"))
			{
				config.setProperty("tab_blocked", item.isSelected() + "");
				if (item.isSelected())
				{
				//	tabPane.insertTab(getResourceMap().getString("blockedPane.TabConstraints.tabTitle"), getResourceMap().getIcon("blockedPane.TabConstraints.tabIcon"), blockedPane, getResourceMap().getString("blockedPane.TabConstraints.tabTooltip"), index >= 2 ? 2 : index); // NOI18N
				//	tabPane.setSelectedComponent(blockedPane);
					//setTabComponent();
				}
				else
				{
				//	tabPane.remove(blockedPane);
				}
			}
			else if (evt.getActionCommand().equals("Following"))
			{
				config.setProperty("tab_following", item.isSelected() + "");
				if (item.isSelected())
				{
				//	tabPane.insertTab(getResourceMap().getString("followingPane.TabConstraints.tabTitle"), getResourceMap().getIcon("followingPane.TabConstraints.tabIcon"), followingPane, getResourceMap().getString("followingPane.TabConstraints.tabTooltip"), index >= 3 ? 3 : index); // NOI18N
				//	tabPane.setSelectedComponent(followingPane);
					//setTabComponent();
				}
				else
				{
				//	tabPane.remove(followingPane);
				}
			}
			else if (evt.getActionCommand().equals("Followers"))
			{
				config.setProperty("tab_followers", item.isSelected() + "");
				if (item.isSelected())
				{
				//	tabPane.insertTab(getResourceMap().getString("followersPane.TabConstraints.tabTitle"), getResourceMap().getIcon("followersPane.TabConstraints.tabIcon"), followersPane, getResourceMap().getString("followersPane.TabConstraints.tabTooltip"), index >= 4 ? 4 : index); // NOI18N
				//	tabPane.setSelectedComponent(followersPane);
					//setTabComponent();
				}
				else
				{
				//	tabPane.remove(followersPane);
				}
			}
			else if (evt.getActionCommand().equals("Search"))
			{
				config.setProperty("tab_search", item.isSelected() + "");
				if (item.isSelected())
				{
					tabPane.addTab(getResourceMap().getString("searchPanel.TabConstraints.tabTitle"), getResourceMap().getIcon("searchPanel.tabIcon"), searchPanel, getResourceMap().getString("searchPanel.TabConstraints.tabTooltip")); // NOI18N
					tabPane.setSelectedComponent(searchPanel);
					//setTabComponent();
				}
				else
				{
					tabPane.remove(searchPanel);
				}
			}
		}
	}//}}}

	public static ResourceMap getResourceMap()
	{
		return TwitzApp.getContext().getResourceMap(TwitzMainView.class);
	}

	public JFrame getMainFrame()
	{
		return mainApp.getMainFrame();
	}

	public TwitzApp getMainApp()
	{
		return this.mainApp;
	}
	
	/**
	 * This method is used to display visual error dialogs
	 *
	 * @param t Any Throwable, this is used to gain the stacktrace
	 * @param title The title of the error dialog
	 * @param message The error message to be displayed
	 * @param method The TwitterMethod object that caused this error. This can be null
	 */
	public void displayError(final Throwable t, final String title, final Object message, final twitter4j.TwitterMethod method, final boolean showprefs)
	{//{{{
		Runnable doRun = new Runnable() {
			public void run() {
				Object[] options = {"Ok", "Stack Trace"};
				int rv = JOptionPane.showOptionDialog(getMainFrame(), message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE, getResourceMap().getIcon("error.icon"), options, options[0]);
				switch (rv)
				{
					case 0:
						if(showprefs && (prefs != null && !prefs.isVisible()))
							showPrefsBox();
						break;
					case 1:
						//show the full stack trace here
						MessageDialog msg = new MessageDialog(getMainFrame(), false);
						msg.setLocationRelativeTo(getMainFrame());
						java.io.StringWriter w = new java.io.StringWriter();
						java.io.PrintWriter p = new java.io.PrintWriter(w);
						t.printStackTrace(p);
						p.flush();
						msg.setMessage(w.toString());
						msg.setVisible(true);
						if(showprefs && (prefs != null && !prefs.isVisible()))
							showPrefsBox();
						break;
				}
			}
		};
		SwingUtilities.invokeLater(doRun);
	}//}}}

	public boolean isMiniMode()//{{{
	{
		return minimode;
	}//}}}

	/**
	 * Display only a miniature version of Twitz
	 */
	public void miniTwitz(boolean startup) //{{{
	{
		java.awt.Rectangle rec = null;
		if(startup)
			oldHeight = config.getInteger("twitz_last_height");
		else
		{
			oldHeight = getMainFrame().getHeight();
			rec = getBounds();
		}
		if(!startup)
			config.setProperty("twitz_last_height", oldHeight+"");
		tabPane.setVisible(false);
		//getMainFrame().getStatusBar().setVisible(false);
		menuBar.setVisible(false);
		setSize(getWidth(), config.getBoolean("twitz_undecorated") ? 90 : 110);
		TwitzApp.fixIFrameLocation(this);
		if(rec != null)
		{
			int bottom = rec.y + rec.height;
			java.awt.Rectangle newrec = getBounds();
			int top = bottom - newrec.height;
			newrec.setLocation(newrec.x, top);
			setLocation(newrec.getLocation());
		}
		tweetBox.setMiniIcon(getResourceMap().getIcon("btnMini.up.icon"));
		//btnMini.setIcon(getResourceMap().getIcon("btnMini.up.icon"));
		minimode = true;
		config.setProperty("minimode", minimode+""); //Update the config file so it starts in the same mode
	}//}}}

	/**
	 * Display the full Twitz window
	 */
	public void fullTwitz() //{{{
	{
		tabPane.setVisible(true);
		//getMainFrame().getStatusBar().setVisible(true);
		menuBar.setVisible(true);
		setSize(getWidth(), config.getInteger("twitz_last_height"));
		TwitzApp.fixIFrameLocation(this);
		//btnMini.setIcon(getResourceMap().getIcon("btnMini.icon"));
		tweetBox.setMiniIcon(resourceMap.getIcon("btnMini.icon"));
		minimode = false;
		config.setProperty("minimode", minimode+""); //Update the config file so it starts in the same mode
	}//}}}

	public TimeLinePanel getTimeLine()
	{
		return this.timelinePanel;
	}

	/**
	 * Switch the tab at index. There will be no Exception thrown if tab does not exist
	 * @param index The index to switch to, this is a 0 based index
	 */
	public void switchTab(int index)
	{
		try
		{
			tabPane.setSelectedIndex(index);
		}
		catch(Exception e){}
	}

	//TwitzListener
	/**
	 * Event Processor for all events that are related to twitter activity in the {@link twitz.event.TwitzEventHandler}
	 * A TwitzEvent will will have and type.
	 * @param t A {@link TwitzEvent} to process
	 */
	public void eventOccurred(TwitzEvent t)//{{{
	{
		//int type = t.getEventType();
		String screenName = null;
		Component caller = null;
		Map eventMap = null;
		boolean async = true;
		ArrayList args = null;

		if(t.getEventMap() != null) {
			eventMap = t.getEventMap();
			if(eventMap.containsKey("caller"))
				caller = (Component) eventMap.get("caller");
			if(eventMap.containsKey("async"))
				async = (Boolean)eventMap.get("async");
			if(eventMap.containsKey("arguments"))
				args = (ArrayList)eventMap.get("arguments");
		}
				//run action performed
		TwitzEventType type = t.getEventType();
		logger.debug("TwitzMainView ----- "+type);
		switch(type)
		{
			case TREND_SEARCH:
				if(args != null && args.size() == 1)
				{
					if(tabPane.indexOfComponent(searchPanel) == -1)
					{
						toggleTabs(new java.awt.event.ActionEvent(this, 2344, "Search"));
					}
					else
					{
						tabPane.setSelectedComponent(searchPanel);
					}
					searchPanel.setSearchText((String)args.get(0));
					searchPanel.setCurrentPage(1);
					searchPanel.doSearch();
				}
			return;
			case LIST_MEMBERS: //do this here to avoid threading issues with the ArrayDeque
				if(args != null && args.size() == 3)
				{
					userlistQue.add(caller);
				}
			break;
			case SEND_DIRECT_MESSAGE:
				logger.info("Send Direct Meessage Clicked");
				User u = null;
				if(eventMap != null) {
					screenName = getScreenNameFromMap(eventMap.get("selections"));
				}
				if(!screenName.equals("")) {
					String text = JOptionPane.showInputDialog("Compose Message for " + screenName);
					if (text != null)
					{
						args = new ArrayList();
						args.add(screenName);
						args.add(text);
						Map m = t.getEventMap();
						m.put("arguments", args);
					}
					else
					{
						return;
					}
				}
			break;
			case ADD_LIST_MEMBER:
			case DELETE_LIST_MEMBER:
			case CHECK_LIST_MEMBERSHIP:
				//logger.debug("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ");
				if(eventMap != null)
				{
					if(alud == null)
						alud = new AddListUserDialog(getMainFrame(), true, this.sessionName);
					alud.reset();
					alud.setUserListMap(userListMainPanel1.getUserLists());
					if(eventMap.containsKey("selections"))
					{
						User aUser = getUserFromMap(eventMap.get("selections"));
						if(aUser != null)
						{
							alud.setUser(aUser);
						}
						else
						{
							alud.setSelectedMode(true);
						}
					}
					else
					{
						alud.setSelectedMode(true);
					}
					if(eventMap.containsKey("userList"))
					{
						alud.setSelectedUserList((UserList)eventMap.get("userList"));
					}
					alud.setMode(AddListUserDialog.Mode.USER_ADD);
					if(type.equals(TwitzEventType.DELETE_LIST_MEMBER))
					{
						alud.setMode(AddListUserDialog.Mode.LIST_DELETE);
					}
					else if(type.equals(TwitzEventType.CHECK_LIST_MEMBERSHIP))
					{
						alud.setMode(AddListUserDialog.Mode.USER_CHECK);
					}
					
					
					alud.setLocationRelativeTo(this);
					alud.setVisible(true);
					if(alud.getSelectedUserList() == null)
					{
						return;
					}
					UserList select = alud.getSelectedUserList();
					User user = alud.getUser();
					if(user == null)
					{
						return;
					}
					//checkUserListMembership(java.lang.String listOwnerScreenName, int listId, int userId)
					args = new ArrayList();
					Map m = t.getEventMap();
					if(type.equals(TwitzEventType.CHECK_LIST_MEMBERSHIP))
					{
						args.add(select.getUser().getScreenName());
						args.add(select.getId());
						args.add(user.getId());
						que.add(select);
					}
					else
					{
						args.add(select.getId());
						args.add(user.getId());
					}
					m.put("arguments", args);
				}
			break;
			case CREATE_USER_LIST:
				CreateUserListDialog culd = new CreateUserListDialog(getMainFrame(), true);
				culd.setLocationRelativeTo(this);
				culd.setVisible(true);
				if(culd.getArgs() == null)
				{
					return;
				}
				Map map = t.getEventMap();
				map.put("arguments", culd.getArgs());
				break;
			case DELETE_USER_LIST:
				if (eventMap != null)
				{
					if (alud == null)
					{
						alud = new AddListUserDialog(getMainFrame(), true, this.sessionName);

					}
					alud.reset();
					alud.setUserListMap(userListMainPanel1.getUserLists());
					alud.setLocationRelativeTo(this);
					alud.setMode(AddListUserDialog.Mode.LIST_DELETE);
					alud.setVisible(true);
					if (alud.getSelectedUserList() == null)
					{
						return;
					}
					UserList select = alud.getSelectedUserList();
					args = new ArrayList();
					args.add(select.getId());
					Map m = t.getEventMap();
					m.put("arguments", args);
				}
				break;
			case EXISTS_FRIENDSHIP:
				if(eventMap != null) {
					names = getScreenNamesFromMap(eventMap.get("selections"));
				}
			break;
			case FAVORITES:
			case HOME_TIMELINE:
			case FRIENDS_TIMELINE:
			case USER_TIMELINE:
			case MENTIONS:
			case RETWEETED_BY_ME:
			case RETWEETED_TO_ME:
			case RETWEETS_OF_ME:
				if(caller != null)
					timelineQue.add(caller);
			break;
		}
		twitz.events.TwitzEventHandler handler = new twitz.events.TwitzEventHandler(t, sessionName);
		handler.addPropertyChangeListener(mainApp.getTrayIcon());
		handler.addPropertyChangeListener(statusListener);
		handler.start();
//		(new twitz.events.TwitzEventHandler(t, twitterManager)).execute();
	} //}}}

	//TwitterListener abstract methods
	// <editor-fold defaultstate="collapsed" desc="Abstract Methods">

	public void addTwitzListener(TwitzListener o) {
		dtem.addTwitzListener(o);
	}

	public void removeTwitzListener(TwitzListener o) {
		dtem.removeTwitzListener(o);
	}
	
	public void fireTwitzEvent(TwitzEvent e) {
		dtem.fireTwitzEvent(e);
	}

	//ActionListener
	public void actionPerformed(ActionEvent evt) {//{{{
		//System.out.println(evt.getSource().toString());
		String screenName = null;
		String command = evt.getActionCommand();
		if(command.equals("tabs_up")) {
			config.setProperty("tab_position", "north");
			tabPane.setTabPlacement(JTabbedPane.TOP);
			//JTabbedPane.TOP JTabbedPane.BOTTOM JTabbedPane.LEFT JTabbedPane.RIGHT
		}
		else if(command.equals("tabs_down")) {
			config.setProperty("tab_position", "south");
			tabPane.setTabPlacement(JTabbedPane.BOTTOM);
		}
		else if(command.equals("tabs_right")) {
			config.setProperty("tab_position", "east");
			tabPane.setTabPlacement(JTabbedPane.RIGHT);
		}
		else if(command.equals("tabs_left")) {
			config.setProperty("tab_position", "west");
			tabPane.setTabPlacement(JTabbedPane.LEFT);
		}
		else {
			logger.debug("9999999999999999999999999999999999999999999999");
			Map map = Collections.synchronizedMap(new TreeMap());
			map.put("caller", evt.getSource());
			map.put("async", true);
			User[] selections = new User[4];//getContactsList().getSelectedValues();
			map.put("selections", selections);
			logger.debug("Got action to perform"); 
			eventOccurred(new TwitzEvent(this, TwitzEventType.valueOf(evt.getActionCommand()),
						new java.util.Date().getTime()));
		}
	}//}}}

	// TwitterListener//{{{
	public void searched(QueryResult queryResult)//{{{
	{
		searchPanel.updateTweetsList(queryResult);
	}//}}}

	public void gotTrends(Trends trends)//{{{
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "gotTrends(Trends trends) Not supported yet","2"});
	}//}}}

	public void gotCurrentTrends(Trends trends)//{{{
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "gotCurrentTrends(Trends trends) Not supported yet","2"});
	}//}}}

	public void gotDailyTrends(List trendsList)//{{{
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "gotDailyTrends(List<Trends> trendsList) Not supported yet","2"});
	}//}}}

	public void gotWeeklyTrends(List trendsList)//{{{
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "gotWeeklyTrends(List<Trends> trendsList) Not supported yet","2"});
	}//}}}

	public void gotPublicTimeline(ResponseList statuses)//{{{
	{
		Object o = timelineQue.peek();
		if(o instanceof TimeLinePanel)
		{
			TimeLinePanel panel = (TimeLinePanel)timelineQue.poll();
			panel.updateStatus(statuses);
		}
		else
		{
			friendsStatusPanel.updateStatus(statuses);
		}
	}//}}}

	public void gotHomeTimeline(ResponseList statuses)//{{{
	{
		Object o = timelineQue.peek();
		if(o instanceof TimeLinePanel)
		{
			TimeLinePanel panel = (TimeLinePanel)timelineQue.poll();
			panel.updateStatus(statuses);
		}
		else
		{
			friendsStatusPanel.updateStatus(statuses);
		}
		//timelinePanel.updateStatus(statuses);
	}//}}}

	public void gotFriendsTimeline(ResponseList statuses)//{{{
	{
		Object o = timelineQue.peek();
		if(o instanceof TimeLinePanel)
		{
			TimeLinePanel panel = (TimeLinePanel)timelineQue.poll();
			panel.updateStatus(statuses);
		}
		else
		{
			friendsStatusPanel.updateStatus(statuses);
		}
		//timelinePanel.updateStatus(statuses);
	}//}}}

	public void gotUserTimeline(ResponseList statuses)//{{{
	{
		Object o = timelineQue.peek();
		if(o instanceof TimeLinePanel)
		{
			TimeLinePanel panel = (TimeLinePanel)timelineQue.poll();
			panel.updateStatus(statuses);
		}
		else
		{
			friendsStatusPanel.updateStatus(statuses);
		}
		//timelinePanel.updateStatus(statuses);
	}//}}}

	public void gotMentions(ResponseList statuses)//{{{
	{
		Object o = timelineQue.peek();
		if(o instanceof TimeLinePanel)
		{
			TimeLinePanel panel = (TimeLinePanel)timelineQue.poll();
			panel.updateStatus(statuses);
		}
		else
		{
			friendsStatusPanel.updateStatus(statuses);
		}
		//timelinePanel.updateStatus(statuses);
	}//}}}

	public void gotRetweetedByMe(ResponseList statuses)//{{{
	{
		Object o = timelineQue.peek();
		if(o instanceof TimeLinePanel)
		{
			TimeLinePanel panel = (TimeLinePanel)timelineQue.poll();
			panel.updateStatus(statuses);
		}
		else
		{
			friendsStatusPanel.updateStatus(statuses);
		}
		//timelinePanel.updateStatus(statuses);
	}//}}}

	public void gotRetweetedToMe(ResponseList statuses)//{{{
	{
		Object o = timelineQue.peek();
		if(o instanceof TimeLinePanel)
		{
			TimeLinePanel panel = (TimeLinePanel)timelineQue.poll();
			panel.updateStatus(statuses);
		}
		else
		{
			friendsStatusPanel.updateStatus(statuses);
		}
		//timelinePanel.updateStatus(statuses);
	}//}}}

	public void gotRetweetsOfMe(ResponseList statuses)//{{{
	{
		Object o = timelineQue.peek();
		if(o instanceof TimeLinePanel)
		{
			TimeLinePanel panel = (TimeLinePanel)timelineQue.poll();
			panel.updateStatus(statuses);
		}
		else
		{
			friendsStatusPanel.updateStatus(statuses);
		}
		//timelinePanel.updateStatus(statuses);
	}//}}}

	public void gotShowStatus(Status status)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "gotShowStatus(Status status) Not supported yet","2"});
	}

	public void updatedStatus(Status status)//{{{
	{
		//txtTweet.setText("");
		tweetBox.clearTweetText();
		tweetBox.setButtonEnabled(false);
		//btnTweet.setEnabled(false);

		//I need to just reload the timeline list here instead of adding this status
		//that us more expensive but is the best way since I wont know before hand 
		//which timeline is showing when the user tweets. just call getHomeTimeline 
		//or getUserTimeline. the callback for those will update the list
		User u = status.getUser();
		Map map = Collections.synchronizedMap(new TreeMap());
		map.put("async", true);
		map.put("caller", timelinePanel);
		ArrayList args = new ArrayList();
		args.add(u.getScreenName());
		map.put("arguments", args);
		TwitzEvent te = new TwitzEvent(this, TwitzEventType.USER_TIMELINE, new Date().getTime(), map);
//		(new twitz.events.TwitzEventHandler(te, sessionName)).execute();
		twitz.events.TwitzEventHandler handler = new twitz.events.TwitzEventHandler(te, sessionName);
		handler.addPropertyChangeListener(mainApp.getTrayIcon());
		handler.addPropertyChangeListener(statusListener);
		handler.start();
		this.timelineQue.add(timelinePanel);
	}//}}}

	public void destroyedStatus(Status destroyedStatus)//{{{
	{
		//See explanation in above method
		User u = destroyedStatus.getUser();
		Map map = Collections.synchronizedMap(new TreeMap());
		map.put("async", true);
		map.put("caller", timelinePanel);
		ArrayList args = new ArrayList();
		args.add(u.getScreenName());
		map.put("arguments", args);
		TwitzEvent te = new TwitzEvent(this, TwitzEventType.USER_TIMELINE, new Date().getTime(), map);
		//(new twitz.events.TwitzEventHandler(te, sessionName)).execute();
		twitz.events.TwitzEventHandler handler = new twitz.events.TwitzEventHandler(te, sessionName);
		handler.addPropertyChangeListener(mainApp.getTrayIcon());
		handler.addPropertyChangeListener(statusListener);
		handler.start();
		this.timelineQue.add(timelinePanel);
	}//}}}

	public void retweetedStatus(Status retweetedStatus)//{{{
	{
		//See explanation in above method
		User u = retweetedStatus.getUser();
		Map map = Collections.synchronizedMap(new TreeMap());
		map.put("async", true);
		map.put("caller", timelinePanel);
		ArrayList args = new ArrayList();
		args.add(u.getScreenName());
		map.put("arguments", args);
		TwitzEvent te = new TwitzEvent(this, TwitzEventType.USER_TIMELINE, new Date().getTime(), map);
//		(new twitz.events.TwitzEventHandler(te, sessionName)).execute();
		twitz.events.TwitzEventHandler handler = new twitz.events.TwitzEventHandler(te, sessionName);
		handler.addPropertyChangeListener(mainApp.getTrayIcon());
		handler.addPropertyChangeListener(statusListener);
		handler.start();
		this.timelineQue.add(timelinePanel);
	}//}}}

	//ResponseList<Status> retweets
	public void gotRetweets(ResponseList retweets)//{{{
	{
		Object o = timelineQue.peek();
		if(o instanceof TimeLinePanel)
		{
			TimeLinePanel panel = (TimeLinePanel)timelineQue.poll();
			panel.updateStatus(retweets);
		}
		else
		{
			friendsStatusPanel.updateStatus(retweets);
		}
//		StatusListModel tlm = timelinePanel.getStatusList().getModel();
//		tlm.clear();
//		for(Object s : retweets) {
//			if(s instanceof Status)
//			{
//				tlm.addStatus((Status)s);
//			}
//		}
	}//}}}

	public void gotUserDetail(User user)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "gotUserDetail(User user) Not supported yet","2"});
	}

	//ResponseList<User> users
	public void lookedupUsers(ResponseList users)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "lookedupUsers(ResponseList<User> users) Not supported yet","2"});
	}

	//ResponseList<User> userList
	public void searchedUser(ResponseList userList)
	{
		searchPanel.updateUsersList(userList);
	}

	//ResponseList<Category> category
	public void gotSuggestedUserCategories(ResponseList category)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "gotSuggestedUserCategories() Not supported yet","2"});
	}

	//ResponseList<User> users
	public void gotUserSuggestions(ResponseList users)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "gotUserSuggestions() Not supported yet","2"});
	}

	//PagableResponseList<User> users
	public void gotFriendsStatuses(PagableResponseList users)//{{{
	{
		//Now we update the friendsList
		friends.updateList(users);
	}//}}}

	//PagableResponseList<User> users
	public void gotFollowersStatuses(PagableResponseList users)//{{{
	{
		followers.updateList(users);
	}//}}}

	public void createdUserList(UserList userList)
	{
		this.userListMainPanel1.addUserList(userList);
		//firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void updatedUserList(UserList userList)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "updatedUserList(UserList userList) Not supported yet","2"});
	}

	//PagableResponseList<UserList> userLists
	public void gotUserLists(PagableResponseList userLists) //{{{
	{
		userListMainPanel1.addUserList(userLists);
		//firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "gotUserLists(PagableResponseList<UserList> userLists) Not supported yet","2"});
	} //}}}

	public void gotShowUserList(UserList userList)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "gotShowUserList(UserList userList) Not supported yet","2"});
	}

	public void destroyedUserList(UserList userList) //{{{
	{
		this.userListMainPanel1.removeUserList(userList.getName());
	} //}}}

	public void gotUserListStatuses(ResponseList statuses) //{{{
	{
		this.friendsStatusPanel.updateStatus(statuses);
	} //}}}

	public void gotUserListMemberships(PagableResponseList userLists)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "gotUserListMemberships() Not supported yet","2"});
	}

	public void gotUserListSubscriptions(PagableResponseList userLists)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "gotUserListSubscriptions() Not supported yet","2"});
	}

	public void gotUserListMembers(PagableResponseList users) //{{{
	{
		Object o = userlistQue.peek();
		if(o instanceof UserListPanel)
		{
			UserListPanel ulp = (UserListPanel) userlistQue.poll();
			ulp.updateList(users);
		}
		else if(o instanceof UserListBox)
		{
			UserListBox ulp = (UserListBox) userlistQue.poll();
			ulp.updateList(users);
		}
	} //}}}

	public void addedUserListMember(UserList userList)
	{
		UserListBox box = userListMainPanel1.getListBox(userList.getName());
		if(box != null)
		{
			box.loadListUsers();
		}
	}

	public void deletedUserListMember(UserList userList)
	{
		UserListBox box = userListMainPanel1.getListBox(userList.getName());
		if(box != null)
		{
			box.loadListUsers();
		}
	}

	public void checkedUserListMembership(User users)
	{
		Object obj = que.peek();
		if(obj instanceof UserList)
		{
			UserList list = (UserList)que.poll();
			firePropertyChange("POPUP", new Object(),
					new String[]{
						resourceMap.getString("USER_NOT_USERLIST_MEMBER.TITLE.TEXT"),
						resourceMap.getString("LIST_MEMBER.TEXT", users.getScreenName(), list.getName()),
						"2"
			});
		}
		else
			firePropertyChange("POPUP", new Object(),
					new String[]{
						resourceMap.getString("USER_NOT_USERLIST_MEMBER.TITLE.TEXT"),
						resourceMap.getString("LIST_MEMBER.TEXT", users.getScreenName()),
						"2"
			});
	}

	public void gotUserListSubscribers(PagableResponseList users)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void subscribedUserList(UserList userList)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void unsubscribedUserList(UserList userList)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void checkedUserListSubscription(User user)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void gotDirectMessages(ResponseList messages)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void gotSentDirectMessages(ResponseList messages)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void sentDirectMessage(DirectMessage message)//{{{
	{
		String str[] = {"Twitz Message", getResourceMap().getString("DIRECT_MESSAGE_SENT.TEXT", message.getRecipientScreenName()), "2"};
		firePropertyChange("POPUP", new Object(), str);
	}//}}}

	public void destroyedDirectMessage(DirectMessage message)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void createdFriendship(User user)//{{{
	{
		//Load friends list
		Map map = Collections.synchronizedMap(new TreeMap());
		map.put("async", true);
		map.put("caller", friends);
		ArrayList args = new ArrayList();
		args.add(getAuthenticatedUser().getId());//screenName
		args.add(-1L);
		map.put("arguments", args);
		eventOccurred(new TwitzEvent(this, TwitzEventType.FRIENDS_STATUSES, new java.util.Date().getTime(), map));
		String[] str = {"Twitz Message", getResourceMap().getString("FRIENDSHIP_CREATED.TEXT",user.getScreenName()),"2"};
		firePropertyChange("POPUP", new Object(), str);
	}//}}}

	public void destroyedFriendship(User user)//{{{
	{
		//Load friends list
		Map map = Collections.synchronizedMap(new TreeMap());
		map.put("async", true);
		map.put("caller", friends);
		ArrayList args = new ArrayList();
		args.add(getAuthenticatedUser().getId());//screenName
		args.add(-1L);
		map.put("arguments", args);
		eventOccurred(new TwitzEvent(this, TwitzEventType.FRIENDS_STATUSES, new java.util.Date().getTime(), map));
		String[] str = {"Twitz Message", getResourceMap().getString("FRIENDSHIP_DELETED.TEXT",user.getScreenName()),"2"};
		firePropertyChange("POPUP", new Object(), str);
	}//}}}

	public void gotExistsFriendship(boolean exists)//{{{
	{
		if(exists) {
			String[] str = {"Twitz Message", getResourceMap().getString("FRIENDSHIP_EXISTS.TEXT",names.get(0),names.get(1)),"2"};
			firePropertyChange("POPUP", new Object(), str);
		}
		else {
			String[] str = {"Twitz Message", getResourceMap().getString("FRIENDSHIP_NOT_EXISTS.TEXT",names.get(0),names.get(1)),"2"};
			firePropertyChange("POPUP", new Object(), str);
		}
	}//}}}

	public void gotShowFriendship(Relationship relationship)
	{
		if (relationship != null)
		{
			RelationshipDialog rd = new RelationshipDialog(getMainFrame(), true);
			rd.setRelationship(relationship);
			rd.setLocationRelativeTo(this);
			rd.setVisible(true);
		}
	}

	public void gotIncomingFriendships(IDs ids)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void gotOutgoingFriendships(IDs ids)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void gotFriendsIDs(IDs ids)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void gotFollowersIDs(IDs ids)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void gotRateLimitStatus(RateLimitStatus rateLimitStatus)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void updatedDeliveryDevice(User user)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void updatedProfileColors(User user)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void updatedProfileImage(User user) //{{{
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "Completed updating profile image","2"});
	}//}}}

	public void updatedProfileBackgroundImage(User user)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void updatedProfile(User user) //{{{
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "Profile update completed","2"});
	}//}}}

	public void gotFavorites(ResponseList statuses)
	{
		Object o = timelineQue.peek();
		if(o instanceof TimeLinePanel)
		{
			TimeLinePanel panel = (TimeLinePanel)timelineQue.poll();
			panel.updateStatus(statuses);
		}
		else
		{
			friendsStatusPanel.updateStatus(statuses);
		}
		//firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void createdFavorite(Status status)
	{
		updateTabState(true);
		//firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void destroyedFavorite(Status status)
	{
		updateTabState(true);
		//firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void enabledNotification(User user) //{{{
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOTIFICATION_ADDED.TEXT", user.getScreenName()),"2"});
	} //}}}

	public void disabledNotification(User user) //{{{
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOTIFICATION_REMOVED.TEXT", user.getScreenName()),"2"});
	} //}}}

	public void createdBlock(User user)//{{{
	{
		TwitzEvent te = new TwitzEvent(this, TwitzEventType.BLOCKING_USERS, new Date().getTime());
//		(new twitz.events.TwitzEventHandler(te, sessionName)).execute();
		twitz.events.TwitzEventHandler handler = new twitz.events.TwitzEventHandler(te, sessionName);
		handler.addPropertyChangeListener(mainApp.getTrayIcon());
		handler.addPropertyChangeListener(statusListener);
		handler.start();
	}//}}}

	public void destroyedBlock(User user)//{{{
	{
		TwitzEvent te = new TwitzEvent(this, TwitzEventType.BLOCKING_USERS, new Date().getTime());
//		(new twitz.events.TwitzEventHandler(te, sessionName)).execute();
		twitz.events.TwitzEventHandler handler = new twitz.events.TwitzEventHandler(te, sessionName);
		handler.addPropertyChangeListener(mainApp.getTrayIcon());
		handler.addPropertyChangeListener(statusListener);
		handler.start();
	}//}}}

	public void gotExistsBlock(boolean blockExists)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void gotBlockingUsers(ResponseList blockingUsers)//{{{
	{
		blocked.updateList(blockingUsers);
	}//}}}

	public void gotBlockingUsersIDs(IDs blockingUsersIDs)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void reportedSpam(User reportedSpammer)
	{
		//TODO: flag this user for exclusion filter from further viewing if twitter.com does not do it.
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void gotAvailableTrends(ResponseList locations) //{{{
	{
		trendPanel.setLocations(locations);
	} //}}}

	public void gotLocationTrends(Trends trends) //{{{
	{
		trendPanel.setTrends(trends);
	} //}}}

	public void gotNearByPlaces(ResponseList places)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void gotReverseGeoCode(ResponseList places)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void gotGeoDetails(Place place)
	{
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", resourceMap.getString("NOT_SUPPORTED.TEXT"),"2"});
	}

	public void verifiedCredentials(User user)
	{
		setAuthenticatedUser(user);
		setConnected(true);//if it gets here its conencted
	}

	public void gotRetweetedBy(ResponseList rl)
	{
		//throw new UnsupportedOperationException("Not supported yet.");
	}

	public void gotRetweetedByIDs(IDs ids)
	{
		//throw new UnsupportedOperationException("Not supported yet.");
	}

	public void tested(boolean test)//{{{
	{
		setConnected(test);
		firePropertyChange("POPUP", new Object(), new String[]{"Twitz Message", "Connection to twitter.com has "+ (test ? "succeeded" : "failed!!!"),"2"});
		//Fire off all the startup tasks that populate the GUI
	}//}}}

	public void onException(TwitterException te, TwitterMethod method)//{{{
	{
		if(logdebug)
		{
			logger.debug(method);
		}
		logger.error(te);
		if(method != null)
		{
			if(method.equals(TwitterMethod.HOME_TIMELINE) ||
					method.equals(TwitterMethod.FRIENDS_TIMELINE) ||
					method.equals(TwitterMethod.USER_TIMELINE) ||
					method.equals(TwitterMethod.MENTIONS) ||
					method.equals(TwitterMethod.RETWEETED_BY_ME) ||
					method.equals(TwitterMethod.RETWEETED_TO_ME) ||
					method.equals(TwitterMethod.RETWEETS_OF_ME))
			{
				//Remove this object so we dont interfare with later calls
				timelineQue.poll();
			}
			else if(method.equals(TwitterMethod.UPDATE_STATUS))
			{
				tweetBox.setButtonEnabled(true);
				tweetBox.setTweetEnabled(true);
			}
			else if(method.equals(TwitterMethod.LIST_MEMBERS))
			{
				//Remove this object so we dont interfare with later calls
				userlistQue.poll();
			}
		}
		if(te.getStatusCode() == 401)
		{
			//Incorrect login or password, do something and return
			displayError(te, resourceMap.getString("ERROR_TITLE.TEXT"), resourceMap.getString("PASSWORD_ERROR.TEXT"), method, true);
			//showPrefsBox();
			return;
		}
		if(te.getStatusCode() == 404) 
		{
			if(method != null && method.equals(TwitterMethod.CHECK_LIST_MEMBERSHIP))
			{
				Object obj = que.peek();
				if(obj instanceof UserList)
				{
					UserList list = (UserList)que.poll();
					displayError(te, resourceMap.getString("USER_NOT_USERLIST_MEMBER.TITLE.TEXT"),
						resourceMap.getString("USER_NOT_USERLIST_MEMBER.TEXT", list.getName()), method, false);
				}
				else
				{
					displayError(te, resourceMap.getString("USER_NOT_USERLIST_MEMBER.TITLE.TEXT"),
							resourceMap.getString("USER_NOT_USERLIST_MEMBER.TEXT"), method, false);
				}
				return;
			}
			if(method != null)
			{
				displayError(te, resourceMap.getString("ERROR_TITLE.TEXT"), 
						resourceMap.getString("RESOURCE_NOT_FOUND_ERROR.TEXT"), method, false);
			}
			else
			{
				displayError(te, resourceMap.getString("ERROR_TITLE.TEXT"),
						resourceMap.getString("RESOURCE_NOT_FOUND_ERROR.TEXT"), null, false);
			}
			return;
		}

		
		if(method != null)
		{
			displayError(te, resourceMap.getString("ERROR_TITLE.TEXT"), 
					resourceMap.getString("DEFAULT_ERROR_MESSAGE.TEXT",twitterManager.getResourceMap().getString(method.name())),
					method, false);
		}
		else
		{
			displayError(te, resourceMap.getString("ERROR_TITLE.TEXT"), 
					resourceMap.getString("DEFAULT_NO_METHOD_MESSAGE.TEXT",te.getCause().getMessage()), null, false);
		}
	}//}}}
	//}}}
	//END abstract methods
	//</editor-fold>


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu contextMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTabbedPane friendsPane;
    private javax.swing.JSplitPane friendsPanel;
    private javax.swing.JMenuItem helpItem;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem logsMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JCheckBoxMenuItem menuItemBlocked;
    private javax.swing.JCheckBoxMenuItem menuItemFollowers;
    private javax.swing.JCheckBoxMenuItem menuItemFollowing;
    private javax.swing.JCheckBoxMenuItem menuItemFriends;
    private javax.swing.JCheckBoxMenuItem menuItemSearch;
    private javax.swing.JMenu menuTabs;
    private javax.swing.JMenuItem miniItem;
    private javax.swing.JMenuItem prefsItem;
    private javax.swing.JMenuItem prefsMenuItem;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTable recentList;
    private javax.swing.JPanel recentPane;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JSplitPane timelineTrendsPane;
    // End of variables declaration//GEN-END:variables

	
	private static SettingsManager config;
	int busyIconIndex = 0;
	private int oldHeight = 400;

	//private UserListMainPanel userListMainPanel1;
	private UserListAccordionPanel userListMainPanel1;
	private ContactsList blockedList;
	private FriendsPanel friends;
	private FollowersPanel followers;
	//private ContactsList following = new ContactsList();
	private BlockedPanel blocked;
	private StatusList friendsTweets;
	private StatusPanel friendsStatusPanel;
	private TrendsPanel trendPanel;
	private TimeLinePanel timelinePanel;
	private SearchPanel searchPanel;
	private TweetBox tweetBox;

    private JDialog aboutBox;
	private PreferencesDialog prefs;
	private AddListUserDialog alud;
	private twitz.twitter.TwitterManager twitterManager;
	
	private static TwitzApp mainApp;
	
    private org.jdesktop.application.ResourceMap resourceMap;
    private javax.swing.ActionMap actionMap;

	private Logger logger = Logger.getLogger(TwitzMainView.class.getName());
	
	private DefaultTwitzEventModel dtem = new DefaultTwitzEventModel();
	private PropertyChangeSupport pcs = new PropertyChangeSupport(this);

	private Vector<String> names = new Vector<String>();

	private boolean connected = false;
	private boolean minimode = false;
	private boolean logdebug = logger.isDebugEnabled();
	private boolean startMode = false;
	private boolean forceupdate = false;
	private volatile User authenticatedUser;

	/**
	 * This que is used to track which part of the application is requesting an action
	 */
	private ArrayDeque que = new ArrayDeque();
	private ArrayDeque timelineQue = new ArrayDeque();
	private ArrayDeque userlistQue = new ArrayDeque();
	private java.beans.PropertyChangeListener statusListener;
	//A Map to store all the statuses in the recentList table
	private Map<Long, Status> recentMap = new TreeMap<Long, Status>();
	public static final String DEVMODE_TEXT = System.getProperty("twitz_mode");
	private static final boolean DEVMODE = ("devmode".equals(DEVMODE_TEXT));
	private static TwitzMainView instance;

}
