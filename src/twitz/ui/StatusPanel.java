/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StatusPanel.java
 *
 * Created on Jul 1, 2010, 11:54:05 AM
 */

package twitz.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.Rectangle;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
import java.util.Collections;
import java.util.Map;
import java.util.TreeMap;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.TableColumn;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import twitter4j.PagableResponseList;
import twitter4j.Paging;
import twitter4j.ResponseList;
import twitter4j.Status;
import twitter4j.UserList;
import twitz.TwitzMainView;
import twitz.events.DefaultTwitzEventModel;
import twitz.events.TwitzEvent;
import twitz.events.TwitzEventModel;
import twitz.events.TwitzEventType;
import twitz.events.TwitzListener;
import twitz.ui.StatusList;
import twitz.ui.dialogs.StatusPopupPanel;
import twitz.ui.models.StatusListModel;
import twitz.ui.models.StatusTableModel;
import twitz.util.*;

/**
 *
 * @author mistik1
 */
public class StatusPanel extends javax.swing.JPanel implements TwitzEventModel, 
		PropertyChangeListener, ActionListener, MouseListener, java.io.Serializable
	{
	
	public StatusPanel()
	{
		this(false);
	}

    /** Creates new form StatusPanel */
    public StatusPanel(boolean timeline) {
		super();
		this.inTimeline = timeline;
		resourceMap = twitz.TwitzApp.getContext().getResourceMap(StatusPanel.class);
        initComponents();
		initDefaults();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusScrollPane = new javax.swing.JScrollPane();
        statusList = new twitz.ui.StatusList();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        statusScrollPane.setName("statusScrollPane"); // NOI18N

        statusList.setName("statusList"); // NOI18N
        statusScrollPane.setViewportView(statusList);

        add(statusScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

	private void initDefaults()
	{
	//	StatusTableModel model = new StatusTableModel();
	//	model.addColumn("Tweets");
	//	status = new javax.swing.JTable(model);
	//	status.setDefaultRenderer(Status.class, new twitz.ui.renderers.StatusTablePanelRenderer());
	//	status.setDefaultEditor(Status.class, new twitz.ui.editors.StatusTablePanelEditor());
		twitz.TwitzMainView.fixJScrollPaneBarsSize(statusScrollPane);
	//	statusScrollPane.setViewportView(status);
	//	status.setFillsViewportHeight(true);
	//	statusList.addHotSpot("Actions", new Rectangle(45, 25, 20, 20));
	//	statusList.addHotSpot("Favorite", new Rectangle(65, 25, 20, 20));
	//	statusList.addHotSpot("Retweet", new Rectangle(85, 25, 20, 20));
	//	statusList.addPropertyChangeListener(this);
		ListHotSpot action = new ListHotSpot("Actions", ListHotSpot.Direction.RIGHT_TO_LEFT, new Rectangle(45, 25, 20, 20), "");
		action.addPropertyChangeListener(this);
		ListHotSpot fav = new ListHotSpot("Favorite", ListHotSpot.Direction.RIGHT_TO_LEFT, new Rectangle(65, 25, 20, 20), "");
		fav.addPropertyChangeListener(this);
		ListHotSpot retweet = new ListHotSpot("Retweet", ListHotSpot.Direction.RIGHT_TO_LEFT, new Rectangle(85, 25, 20, 20), "");
		//ListHotSpot retweet = new ListHotSpot("Retweet", ListHotSpot.Direction.LEFT_TO_RIGHT, new Rectangle(85, 25, 20, 20), "");
		retweet.addPropertyChangeListener(this);
		statusList.addHotSpot(action);
		statusList.addHotSpot(fav);
		statusList.addHotSpot(retweet);
		if(!inTimeline)
			statusList.addMouseListener(this);
	}

	public void setSessionName(String name)
	{
		String old = this.sessionName;
		this.sessionName = name;
		//config = TwitzSessionManager.getInstance().getSettingsManagerForSession(sessionName);
		view = TwitzSessionManager.getInstance().getTwitMainViewForSession(sessionName);
		//firePropertyChange(SESSION_PROPERTY, old, name);
	}

	public String getSessionName()
	{
		return this.sessionName;
	}

	public void setUserList(UserList list)
	{
		UserList old = this.userlist;
		if(list != null)
		{
			this.userlist = list;
			setInUserList(true);
			this.firePropertyChange("StatusPanelUserListChanged", old, this.userlist);
		}
		else
		{
			this.userlist = null;
			setInUserList(false);
			this.firePropertyChange("StatusPanelUserListChanged", old, this.userlist);
		}
	}

	public UserList getUserList()
	{
		return this.userlist;
	}

	private void setInUserList(boolean val)
	{
		this.isUserList = val;
	}

	public boolean isInUserList()
	{
		return this.isUserList;
	}
	
	public void setInTimeline(boolean val)
	{
		this.inTimeline = val;
	}

	public boolean isInTimeline()
	{
		return this.inTimeline;
	}

	public void setStatusList(StatusList list)
	{
		StatusList old = this.statusList;
		if(list != null)
		{
			this.statusList = list;
			this.firePropertyChange("StatusPanelStatusListChanged", old, this.statusList);
		}
	}

	public void setStatusTable(JTable list)
	{
		JTable old = this.status;
		if(list != null)
		{
			this.status = list;
			this.firePropertyChange("StatusPanelStatusListChanged", old, this.status);
		}
	}

	public JTable getStatusTable()
	{
		return status;
	}

	public StatusList getStatusList()
	{
		return this.statusList;
	}

	private boolean isStatus(Object o)
	{
		return (o instanceof Status);
	}

	public void updateStatus(final ResponseList statuses)
	{
		if(statuses != null)
		{
			SwingWorker<List<Status>, Status> worker = new SwingWorker<List<Status>, Status>()
			{
				StatusListModel model = new StatusListModel();

				@Override
				public List<Status> doInBackground()
				{
					for(Object o: statuses)
					{
						if(isStatus(o))
						{
							Status s = (Status)o;
							publish(s);
							store.registerUser(s.getUser());
							model.addStatus(s);
						}
					}
					return null;//I wont be using get() to process anything
				}

				@Override
				protected void process(List<Status> part)
				{
					for(Status s: part)
					{
						store.registerUser(s.getUser());
						model.addStatus(s);
					}
				}

				@Override
				protected void done()
				{
					getStatusList().setModel(model);
				}
			};
			worker.execute();
		}
	}

	//TwitzEventModel
	public void addTwitzListener(TwitzListener o) {
		dtem.addTwitzListener(o);
	}

	public void removeTwitzListener(TwitzListener o) {
		dtem.removeTwitzListener(o);
	}

	public void fireTwitzEvent(TwitzEvent e) {
		dtem.fireTwitzEvent(e);
	}

	//ActionListener
	public void actionPerformed(ActionEvent e) {//{{{
		Map map = Collections.synchronizedMap(new TreeMap());
		map.put("caller", this);
		map.put("async", true);
		Status[] selections = getStatusList().getSelectedValues();
		//User[] selections = new User[select.length]; //getContactsList().getSelectedValues();
		map.put("selections", selections);
		fireTwitzEvent(new TwitzEvent(this, TwitzEventType.valueOf(e.getActionCommand()), new java.util.Date().getTime(), map));
	}//}}}
	
	public void propertyChange(PropertyChangeEvent evt)//{{{
	{
		if("Actions".equals(evt.getPropertyName()))
		{
			Status lstat = statusList.getSelectedValue();
			int selection = statusList.getSelectedIndex();
			MouseEvent e = (MouseEvent)evt.getNewValue();
			StatusPopupPanel spp = new StatusPopupPanel();
			spp.configureBox(statusList, lstat, selection);
			spp.popupBox(e.getXOnScreen(), e.getYOnScreen());
		}
	}//}}}

	//MouseListener
	public void mouseClicked(MouseEvent e) {//{{{
		if (e.getButton() == MouseEvent.BUTTON3)
		{
			java.awt.Point p = e.getPoint();
			if (e.getSource() instanceof StatusList)
			{
				StatusList clist = (StatusList) e.getSource();
				int index = clist.locationToIndex(p);
				if (index != -1)
				{ //Show menu only if list is not empty
					if(clist.getSelectedIndex() == -1)
						clist.setSelectedIndex(index);
					//Make the caller this panel as we can add the selected list to the panel
					//that  will make the action listener of the menu items this panel as well
					view.getActionsMenu(this).show(this, p.x, p.y);
				}

			}
		}
		else if(e.getButton() == MouseEvent.BUTTON1) {
			if(e.getSource() instanceof StatusList) {
				StatusList clist = (StatusList)e.getSource();
				
			}
		}
	}//}}}
	public void mousePressed(MouseEvent e) { }
	public void mouseReleased(MouseEvent e)	{ }
	public void mouseEntered(MouseEvent e) { }
	public void mouseExited(MouseEvent e) { }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private twitz.ui.StatusList statusList;
    private javax.swing.JScrollPane statusScrollPane;
    // End of variables declaration//GEN-END:variables

//	private twitz.ui.StatusTable status = new twitz.ui.StatusTable();
	private javax.swing.JTable status = null;
	private DefaultTwitzEventModel dtem = new DefaultTwitzEventModel();
    private org.jdesktop.application.ResourceMap resourceMap;
	private boolean isUserList = false;
	private boolean inTimeline = false;
	private UserList userlist = null;
	private UserStore store = UserStore.getInstance();
	public static final String SESSION_PROPERTY = "sessionName";
	private String sessionName;
	private TwitzMainView view;
}
