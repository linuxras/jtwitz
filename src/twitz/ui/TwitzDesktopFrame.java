/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TwitzDesktopFrame.java
 *
 * Created on Jul 18, 2010, 4:10:40 PM
 */

package twitz.ui;

import java.awt.IllegalComponentStateException;
import java.util.Collections;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.JDesktopPane;
import javax.swing.JDialog;
import org.jdesktop.application.Action;
import twitz.TwitzApp;
import twitz.TwitzMainView;
import twitz.ui.dialogs.PreferencesDialog;
import twitz.ui.dialogs.TwitzAboutBox;
import twitz.util.TwitzSessionManager;

/**
 *
 * @author mistik1
 */
public class TwitzDesktopFrame extends javax.swing.JFrame {

	public static final String DESKTOP_PROPERTY = "desktopChanged";
	public static final String VIEWS_ADDED_PROPERTY = "viewAdded";
	public static final String VIEWS_REMOVED_PROPERTY = "viewRemoved";
	public static final String SESSION_ADDED_PROPERY = "sessionAdded";
	public static final String SESSION_REMOVED_PROPERTY = "sessionRemoved";

	private TwitzApp mainApp;
	private JDialog aboutBox;
	private PreferencesDialog prefs;
	private static TwitzDesktopFrame instance;
	org.jdesktop.application.ResourceMap resourceMap = TwitzApp.getContext().getResourceMap(TwitzDesktopFrame.class);
	javax.swing.ActionMap actionMap = TwitzApp.getContext().getActionMap(TwitzDesktopFrame.class, this);
	private Map<String, TwitzMainView> views = Collections.synchronizedMap(new TreeMap<String, TwitzMainView>());

    /** Creates new form TwitzDesktopFrame */
    private TwitzDesktopFrame(TwitzApp app) {
		this.mainApp = app;
        initComponents();
		//this.setContentPane(desktop);
		this.desktop.setDragMode(javax.swing.JDesktopPane.OUTLINE_DRAG_MODE);
    }

	public static TwitzDesktopFrame getInstance(TwitzApp app)
	{
		if(instance == null)
		{
			instance = new TwitzDesktopFrame(app);
		}
		return instance;
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        desktop = new javax.swing.JDesktopPane();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        prefsMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        logsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setName("Form"); // NOI18N

        desktop.setName("desktop"); // NOI18N

        jInternalFrame1.setClosable(true);
        jInternalFrame1.setIconifiable(true);
        jInternalFrame1.setMaximizable(true);
        jInternalFrame1.setResizable(true);
        jInternalFrame1.setName("jInternalFrame1"); // NOI18N
        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 198, Short.MAX_VALUE)
        );

        jInternalFrame1.setBounds(240, 60, 150, 230);
        desktop.add(jInternalFrame1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setName("editMenu"); // NOI18N

        prefsMenuItem.setAction(actionMap.get("showPrefsBox")); // NOI18N
        prefsMenuItem.setName("prefsMenuItem"); // NOI18N
        editMenu.add(prefsMenuItem);

        menuBar.add(editMenu);

        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        logsMenuItem.setAction(actionMap.get("viewHTMLLog")); // NOI18N
        logsMenuItem.setName("logsMenuItem"); // NOI18N
        helpMenu.add(logsMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
        );

        pack();
    }//GEN-END:initComponents

	@Action
    public void showAboutBox() {//{{{
        if (aboutBox == null) {
            //JFrame mainFrame = TwitzApp.getApplication().getMainFrame();
            aboutBox = new TwitzAboutBox(this);
            aboutBox.setLocationRelativeTo(this);
        }
        //TwitzApp.getApplication().show(aboutBox);
		aboutBox.setVisible(true);
    }//}}}

	@Action
	public void showPrefsBox() {//{{{
		if(prefs == null) {
			//JFrame mainFrame = TwitzApp.getApplication().getMainFrame();
			prefs = new PreferencesDialog(this, true, mainApp);
			prefs.addPropertyChangeListener(mainApp);
			prefs.setLocationRelativeTo(this);
		}
		prefs.setVisible(true);
	}//}}}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JMenu editMenu;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JMenuItem logsMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem prefsMenuItem;
    // End of variables declaration//GEN-END:variables

	public void setDesktop(JDesktopPane desk)
	{
		JDesktopPane old = desktop;
		if(desk != null)
		{
			this.desktop = desk;
			this.desktop.setDragMode(javax.swing.JDesktopPane.OUTLINE_DRAG_MODE);
			firePropertyChange(DESKTOP_PROPERTY, old, desk);
		}
	}

	public JDesktopPane getDesktop()
	{
		return this.desktop;
	}

	/**
	 * Adds a new view to the desktop and registers it with our internal Map
	 * @param sessionName Name of the session managing this view
	 * @param view The {@link twitz.TwitzMainView} to add
	 * @throws IllegalComponentStateException if the is already a session be the given {@code sessionName}
	 */
	public void addView(twitz.TwitzMainView view)
	{
		if(view != null)
		{
			String sessionName = view.getSessionName();
			if(!views.containsKey(sessionName))
			{
				views.put(sessionName, view);
//
				view.setVisible(true);
				view.setSize(500, 600);
				try
				{
				getDesktop().add(view, javax.swing.JDesktopPane.DEFAULT_LAYER);
				}
				catch(Exception ex)
				{
					System.out.println(ex.getLocalizedMessage());
				}
				try {
					view.setSelected(true);
				} catch (java.beans.PropertyVetoException e) {}
//
//				firePropertyChange(VIEWS_ADDED_PROPERTY, null, view);
			}
			else
				throw new IllegalComponentStateException("A session by that name already exists");//TODO needs I18N
		}
	}

	public void removeView(String sessionName)
	{
		twitz.TwitzMainView v = null;
		if(views.containsKey(sessionName))
		{
			v = views.remove(sessionName);
			firePropertyChange(VIEWS_REMOVED_PROPERTY, null, v);
		}
	}

	public twitz.TwitzMainView getView(String sessionName)
	{
		twitz.TwitzMainView view = null;
		if(views.containsKey(sessionName))
			view = views.get(sessionName);
		return view;
	}

	public Map<String, twitz.TwitzMainView> getViews()
	{
		return this.views;
	}

}
