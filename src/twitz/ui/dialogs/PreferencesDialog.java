/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PreferencesDialog.java
 *
 * Created on May 16, 2010, 12:07:59 AM
 */

package twitz.ui.dialogs;

import twitz.ui.editors.BrowseCellEditor;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.border.TitledBorder;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.apache.log4j.Logger;
import org.jdesktop.application.Action;
import twitz.*;
import twitz.twitter.TwitterManager;
import twitz.ui.renderers.PreferencesTableCellRenderer;
import twitz.util.DBManager;
import twitz.util.SettingsManager;
import twitz.util.TwitzSessionManager;

/**
 *
 * @author Andrew Williams
 */
public class PreferencesDialog extends javax.swing.JDialog {

	private TwitzSessionManager sm = TwitzSessionManager.getInstance();
	private SettingsManager config = sm.getSettingsManagerForSession("Default");//SettingsManager.getInstance();
	org.jdesktop.application.ResourceMap resourceMap = twitz.TwitzApp.getContext().getResourceMap(PreferencesDialog.class);
	javax.swing.ActionMap actionMap = twitz.TwitzApp.getContext().getActionMap(PreferencesDialog.class, this);
	private Vector vHeaders = new Vector();
	private TableRowSorter sorter;
	private TwitzApp mainApp;
	private boolean updateSkin = false;
	private boolean updateLogin = false;
	private boolean updateOAuth = false;
	private boolean singleSessionMode = false;
	private final Logger logger = Logger.getLogger(this.getClass().getName());
	private final boolean logdebug = logger.isDebugEnabled();
	protected Properties undo = new Properties();
	private DBManager DBM = DBManager.getInstance();
	private Vector<Map<String, Object>> sessions;
	private Map<String, Object> sessionMap;
	private String currentSession = "Default";
	public static final String SINGLE_SESSION_PROPERTY = "singleSessionMode";

    /** Creates new form PreferencesDialog */
    public PreferencesDialog(java.awt.Frame parent, boolean modal, TwitzApp app) {
        super(parent, modal);
		//config = c;
		vHeaders.add("T");
		vHeaders.add("Config");
		vHeaders.add("Values");
		this.mainApp = app;
        initComponents();
		//loadTable();
		
		initDefaults();
		
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked") //{{{
    private void initComponents() {//GEN-BEGIN:initComponents

        configPane = new javax.swing.JScrollPane();
        tblConfig = new javax.swing.JTable();
        btnOk = new javax.swing.JButton();
        btnApply = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        profileBar = new javax.swing.JToolBar();
        cmbProfile = new javax.swing.JComboBox();
        chkDefault = new javax.swing.JCheckBox();
        chkAutoload = new javax.swing.JCheckBox();
        btnLoadProfile = new javax.swing.JButton();
        btnNewProfile = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        setName("Form"); // NOI18N

        configPane.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("configPane.border.title"))); // NOI18N
        configPane.setName("configPane"); // NOI18N

        tblConfig.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "T", "Config", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblConfig.setFillsViewportHeight(true);
        tblConfig.setName("tblConfig"); // NOI18N
        tblConfig.setRowHeight(20);
        configPane.setViewportView(tblConfig);

        
        btnOk.setAction(actionMap.get("btnOkClicked")); // NOI18N
        btnOk.setIcon(resourceMap.getIcon("btnOk.icon")); // NOI18N
        btnOk.setText(resourceMap.getString("btnOk.text")); // NOI18N
        btnOk.setName("btnOk"); // NOI18N

        btnApply.setAction(actionMap.get("applyChanges")); // NOI18N
        btnApply.setIcon(resourceMap.getIcon("btnApply.icon")); // NOI18N
        btnApply.setText(resourceMap.getString("btnApply.text")); // NOI18N
        btnApply.setName("btnApply"); // NOI18N

        btnCancel.setAction(actionMap.get("cancelEdit")); // NOI18N
        btnCancel.setIcon(resourceMap.getIcon("btnCancel.icon")); // NOI18N
        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N

        profileBar.setFloatable(false);
        profileBar.setRollover(true);
        profileBar.setName("profileBar"); // NOI18N

        cmbProfile.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default" }));
        cmbProfile.setToolTipText(resourceMap.getString("cmbProfile.toolTipText")); // NOI18N
        cmbProfile.setName("cmbProfile"); // NOI18N
        profileBar.add(cmbProfile);

        chkDefault.setAction(actionMap.get("setDefaultProfile")); // NOI18N
        chkDefault.setText(resourceMap.getString("chkDefault.text")); // NOI18N
        chkDefault.setToolTipText(resourceMap.getString("chkDefault.toolTipText")); // NOI18N
        chkDefault.setFocusable(false);
        chkDefault.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        chkDefault.setName("chkDefault"); // NOI18N
        chkDefault.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        profileBar.add(chkDefault);

        chkAutoload.setAction(actionMap.get("setAutoLoad")); // NOI18N
        chkAutoload.setText(resourceMap.getString("chkAutoload.text")); // NOI18N
        chkAutoload.setToolTipText(resourceMap.getString("chkAutoload.toolTipText")); // NOI18N
        chkAutoload.setFocusable(false);
        chkAutoload.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        chkAutoload.setName("chkAutoload"); // NOI18N
        chkAutoload.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        profileBar.add(chkAutoload);

        btnLoadProfile.setAction(actionMap.get("loadProfile")); // NOI18N
        btnLoadProfile.setIcon(resourceMap.getIcon("btnLoadProfile.icon")); // NOI18N
        btnLoadProfile.setText(resourceMap.getString("btnLoadProfile.text")); // NOI18N
        btnLoadProfile.setToolTipText(resourceMap.getString("btnLoadProfile.toolTipText")); // NOI18N
        btnLoadProfile.setFocusable(false);
        btnLoadProfile.setName("btnLoadProfile"); // NOI18N
        btnLoadProfile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        profileBar.add(btnLoadProfile);

        btnNewProfile.setAction(actionMap.get("createProfile")); // NOI18N
        btnNewProfile.setIcon(resourceMap.getIcon("btnNewProfile.icon")); // NOI18N
        btnNewProfile.setText(resourceMap.getString("btnNewProfile.text")); // NOI18N
        btnNewProfile.setToolTipText(resourceMap.getString("btnNewProfile.toolTipText")); // NOI18N
        btnNewProfile.setFocusable(false);
        btnNewProfile.setName("btnNewProfile"); // NOI18N
        btnNewProfile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        profileBar.add(btnNewProfile);

        btnDelete.setAction(actionMap.get("deleteSession")); // NOI18N
        btnDelete.setIcon(resourceMap.getIcon("btnDelete.icon")); // NOI18N
        btnDelete.setText(resourceMap.getString("btnDelete.text")); // NOI18N
        btnDelete.setToolTipText(resourceMap.getString("btnDelete.toolTipText")); // NOI18N
        btnDelete.setFocusable(false);
        btnDelete.setName("btnDelete"); // NOI18N
        btnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        profileBar.add(btnDelete);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(profileBar, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(configPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnOk)
                        .addGap(95, 95, 95)
                        .addComponent(btnApply)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(profileBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(configPane, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(btnCancel)
                    .addComponent(btnApply))
                .addContainerGap())
        );

        pack();
    }//GEN-END:initComponents
	//}}}

	private void initDefaults()//{{{
	{
		//DefaultTableColumnModel cModel = (DefaultTableColumnModel)tblConfig.getColumnModel();
		//cModel.getColumn(0).setMaxWidth(10);
//		DefaultTableModel mModel = (DefaultTableModel)tblConfig.getModel();
//		sorter = this.getTableRowSorter(mModel);
//		tblConfig.setRowSorter(sorter);
//		tblConfig.setModel(mModel);
//		sorter.sort();

		twitz.TwitzMainView.fixJScrollPaneBarsSize(configPane);

		WindowListener wl = new WindowAdapter() {

			@Override
			public void windowActivated(WindowEvent e)
			{
				btnApply.setEnabled(false);
			}

		};
		this.addWindowListener(wl);
		//currentSession = (String) cmbProfile.getSelectedItem();
		cmbProfile.removeAllItems();
		try
		{
			sessions = DBM.lookupSessions();
		}
		catch(Exception e)
		{
			logger.error(e.getLocalizedMessage(), e);
		}
		if(null != sessions)
		{
			for(int i=0,max = sessions.size(); i < max; i++)
			{
				Map<String, Object> map = sessions.get(i);
				cmbProfile.addItem(map.get(DBManager.SESSION_NAME));
				boolean def = (Boolean)map.get(DBManager.SESSION_DEFAULT);
				if(def)
				{
					cmbProfile.setSelectedItem(map.get(DBManager.SESSION_NAME));
					chkDefault.setSelected((def));
				}
			}
		}
	}//}}}

	private TableRowSorter getTableRowSorter(DefaultTableModel model) {
		model.addTableModelListener(new TableModelListener() {

			public void tableChanged(TableModelEvent e)
			{
				int t = e.getType();
				if(t == TableModelEvent.INSERT || t == TableModelEvent.UPDATE ) {
					if(e.getColumn() != TableModelEvent.ALL_COLUMNS) 
					{
						int row = tblConfig.convertRowIndexToView(e.getLastRow());
						int col = e.getColumn();
						String s = (String)tblConfig.getValueAt(row, e.getColumn());
						String k = (String)tblConfig.getValueAt(row, 0);
						String cval = config.getString(k);
					//	if(logdebug)
					//	{
					//		logger.debug("Current value for row: "+row+", valie: "+s);
					//		logger.debug("Config value for key: "+k+", value: "+cval);
					//	}
						if(!cval.equals(s))
							btnApply.setEnabled(true);
					}
				}
			}
		});
		TableRowSorter s = new TableRowSorter(model);
		s.setSortable(0, false);
		List<RowSorter.SortKey> list = java.util.Collections.synchronizedList(new ArrayList());
		RowSorter.SortKey key = new RowSorter.SortKey(1, SortOrder.ASCENDING);
		list.add(key);
		s.setSortKeys(list);
		//s.sort();

		return s;
	}

	private void loadProfileCombo()
	{
		try
		{
			sessions = DBM.lookupSessions();
		}
		catch(Exception e)
		{
			logger.error(e.getLocalizedMessage(), e);
		}
		if(null != sessions)
		{
			cmbProfile.removeAllItems();
			for(int i=0,max = sessions.size(); i < max; i++)
			{
				Map<String, Object> map = sessions.get(i);
				cmbProfile.addItem(map.get(DBManager.SESSION_NAME));
				boolean def = (Boolean)map.get(DBManager.SESSION_DEFAULT);
				if(def)
				{
					cmbProfile.setSelectedItem(map.get(DBManager.SESSION_NAME));
					chkDefault.setSelected((def));
				}
			}
		}
	}

	public final void loadTable() {
		tblConfig.setDefaultRenderer(String.class, new PreferencesTableCellRenderer());
		Vector vConfig = new Vector();
		Enumeration en = config.getKeys();
		while(en.hasMoreElements()) {
			//Process keys for inclusion in dialog
			String key = (String)en.nextElement();
			if(key.endsWith(".cfgdesc") || key.endsWith(".cfgtype")) {
				continue; //skip to next iteration
			}
			if(!currentSession.equals("Default") && key.equals(DBManager.SESSION_TWITZ_SKIN))
				continue; //Only Default profile can edit the skin
			String type = config.getString(key + ".cfgtype");
			if (!type.equals("NULL") && !type.equals("Internal"))
			{
				Vector row = new Vector();
				String value = config.getString(key);
				row.add(key);
				row.add(config.getString(key + ".cfgdesc"));
				row.add(value);
				vConfig.add(row);
				undo.setProperty(key, value);
			}
			if(key.equals(DBManager.SESSION_AUTOLOAD))
			{
				this.chkAutoload.setSelected(config.getBoolean(key));
			}
			if(key.equals(DBManager.SESSION_DEFAULT))
			{
				this.chkDefault.setSelected(config.getBoolean(key));
			}
		}
		DefaultTableModel model = (DefaultTableModel)tblConfig.getModel();
		model.setDataVector(vConfig, vHeaders);
		//tblConfig.getColumnModel().getColumn(2).setCellEditor(new BrowseCellEditor());
		DefaultTableColumnModel cModel = (DefaultTableColumnModel)tblConfig.getColumnModel();
		cModel.getColumn(0).setMaxWidth(10);
		cModel.getColumn(2).setCellEditor(new BrowseCellEditor(this, sessionName));
		sorter = this.getTableRowSorter(model);
		tblConfig.setRowSorter(sorter);
		tblConfig.setModel(model);
		sorter.sort();
		
	}

	public void setSessionName(String name)
	{
		//logger.info("setSessionName() = "+name);
		String old = this.sessionName;
		this.sessionName = name;
		this.currentSession = name;
		cmbProfile.setSelectedItem(name);
		//cfgBorder.setTitle(name);
		configPane.setBorder(BorderFactory.createTitledBorder(sessionName));
		config = sm.getSettingsManagerForSession(sessionName);
		view = sm.getTwitzMainViewForSession(sessionName);
		chkDefault.setEnabled(!name.equals("Default"));
		btnDelete.setEnabled(!name.equals("Default"));
		loadTable();
		//firePropertyChange(SESSION_PROPERTY, old, name);
	}

	public String getSessionName()
	{
		return this.sessionName;
	}

	public void setSingleSessionMode(boolean val)
	{
		boolean old = this.singleSessionMode;
		this.singleSessionMode = val;
		this.btnLoadProfile.setEnabled(!val);
		this.btnNewProfile.setEnabled(!val);
		this.cmbProfile.setEnabled(!val);
		if(val)
			this.btnDelete.setEnabled(!val);
		firePropertyChange(SINGLE_SESSION_PROPERTY, old, val);
	}

	public boolean isSingleSessionMode()
	{
		return this.singleSessionMode;
	}

	@Action
	public void cancelEdit()
	{
		String oldSkin = config.getString("twitz_skin");
		config.setProperties(undo);
		if(updateSkin) {
			firePropertyChange("lookAndFeelChange", oldSkin, config.getString("twitz_skin"));
		}
		updateSkin = false;
		updateLogin = false;
		dispose();
	}

	@Action
	public void btnOkClicked()
	{
		saveChanges();
		dispose();
	}

	@Action
	public void createProfile()
	{
		JOptionPane pane = new JOptionPane("Enter a name for the new profile");
		pane.setWantsInput(true);
		JDialog dialog = pane.createDialog(this, "Create Profile");
		dialog.setVisible(true);
		if(pane.getValue() == null) //User closed
			return;
		if(pane.getValue() == JOptionPane.UNINITIALIZED_VALUE)
			return;
		System.out.println("Return code: "+pane.getValue()+"\nInput value: "+pane.getInputValue());
		String profile = (String) pane.getInputValue();

		if(!"".equals(profile))
		{
			boolean success = false;
			try
			{
				success = DBM.populateDefaultSettingsTable(profile);
			}
			catch(Exception e)
			{
				logger.error("Unable to add new profile "+profile+"\n"+e.getLocalizedMessage());
				JOptionPane.showMessageDialog(this, "Unable to add new profile "+profile+"\n"+ e.getLocalizedMessage(), "Profile Error", JOptionPane.ERROR_MESSAGE);
			}
			if(success)
			{
				loadProfileCombo();
				cmbProfile.setSelectedItem(profile);
				loadProfile();
				//logger.debug("=========================++++++++++++++++++++===================");
				//sm.addNewSession(profile);
				//logger.debug("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
				//TODO put in code to load up the profile or whatever
			}
		}
		else
		{
			JOptionPane.showMessageDialog(this, "You must enter a valid name", "Profile Error", JOptionPane.ERROR_MESSAGE);
		}
	}

	@Action
	public void loadProfile()
	{
		String str = (String)cmbProfile.getSelectedItem();
		//config = TwitzSessionManager.getInstance().getSettingsManagerForSession(str);
		this.setSessionName(str);
		logger.debug("-------------------------------------------------------");
		loadTable();
		logger.debug("&&&&&&&&&&&&7&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
	}

	@Action
	public void setDefaultProfile()
	{
		if(!sessionName.equals("Default") && !btnApply.isEnabled())
			btnApply.setEnabled(config.getBoolean(DBManager.SESSION_DEFAULT) == chkDefault.isSelected());
	}

	@Action
	public void setAutoLoad()
	{
		if(!btnApply.isEnabled())
			btnApply.setEnabled(config.getBoolean(DBManager.SESSION_AUTOLOAD) == chkAutoload.isSelected());
	}

	@Action
	public void deleteSession()
	{
		//config
		sm.deleteSession(sessionName);
		logger.debug(sessionName);
		cmbProfile.setSelectedItem("Default");
		cmbProfile.removeItem(sessionName);
		loadProfile();
	}

	//@SuppressWarnings("empty-statement")
	public void saveChanges() {
		DefaultTableModel model = (DefaultTableModel)tblConfig.getModel();
		Vector vData = model.getDataVector();
		String oldSkin = "";
		int size = vData.size();
		Properties p = new Properties();
		for(int i=0; i < size; i++) {
			Vector row = (Vector)vData.get(i);
			String key = row.get(0)+"";
			String value = row.get(2)+"";
			p.setProperty(key, value);
			if(key.equals("twitz_skin")) {
				if(!value.equals(config.getString(key))) {
					updateSkin = true;
					oldSkin = config.getString(key);
				}
			}
			if((key.equals("twitter_id") || key.equals("twitter_password"))) {
				if(!value.equals(config.getString(key))) {
					//logger.debug(key+" value: "+value);
					//Tell TwitterManager to update itself.
					updateLogin = true;
				}
			}
			if(key.equals(DBManager.SESSION_TWITTER_OAUTH) || key.equals(DBManager.SESSION_TWITTER_OAUTH_ID))
			{
				if(!value.equals(config.getString(key)))
				{
					updateLogin = true;
					updateOAuth = true;
				}
			}
		}
		p.setProperty(DBManager.SESSION_AUTOLOAD, chkAutoload.isSelected()+"");
		p.setProperty(DBManager.SESSION_DEFAULT, chkDefault.isSelected()+"");
		config.setProperties(p);
		if(updateLogin)
		{
			if(updateOAuth)
			{
				config.updateAccessToken();
			}
			try
			{
				TwitterManager tm = view.getTwitterManager();
				tm.login();
				//Any calls made to TwitterManager after this will be using the new login info.
				//TODO: need to call Twitter.verifyCredentials() here
			}
			catch(Exception ignore) {}
			view.initTwitter();
			updateLogin = false;
		}
		if(updateSkin) {
			firePropertyChange("lookAndFeelChange", oldSkin, config.getString("twitz_skin"));
			//mainApp.setLAFFromSettings();
		}
		//updateSkin = false;
	}

	@Action
	public void applyChanges() {
		saveChanges();
		btnApply.setEnabled(false);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnLoadProfile;
    private javax.swing.JButton btnNewProfile;
    private javax.swing.JButton btnOk;
    private javax.swing.JCheckBox chkAutoload;
    private javax.swing.JCheckBox chkDefault;
    private javax.swing.JComboBox cmbProfile;
    private javax.swing.JScrollPane configPane;
    private javax.swing.JToolBar profileBar;
    private javax.swing.JTable tblConfig;
    // End of variables declaration//GEN-END:variables

	public TitledBorder cfgBorder = BorderFactory.createTitledBorder("Default");
	public static final String SESSION_PROPERTY = "sessionName";
	private String sessionName;
	private TwitzMainView view;
}
