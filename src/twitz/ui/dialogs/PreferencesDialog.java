/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PreferencesDialog.java
 *
 * Created on May 16, 2010, 12:07:59 AM
 */

package twitz.ui.dialogs;

import twitz.ui.editors.BrowseCellEditor;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Properties;
import java.util.Vector;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.apache.log4j.Logger;
import org.jdesktop.application.Action;
import twitz.*;
import twitz.twitter.TwitterManager;
import twitz.ui.renderers.PreferencesTableCellRenderer;
import twitz.util.SettingsManager;

/**
 *
 * @author mistik1
 */
public class PreferencesDialog extends javax.swing.JDialog {

    /** Creates new form PreferencesDialog */
    public PreferencesDialog(java.awt.Frame parent, boolean modal, TwitzApp app) {
        super(parent, modal);
		//config = c;
		vHeaders.add("T");
		vHeaders.add("Config");
		vHeaders.add("Values");
		this.mainApp = app;
        initComponents();
		loadTable();
		
		initDefaults();
		
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked") //{{{
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblConfig = new javax.swing.JTable();
        btnOk = new javax.swing.JButton();
        btnApply = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = twitz.TwitzApp.getContext().getResourceMap(PreferencesDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tblConfig.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "T", "Config", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblConfig.setName("tblConfig"); // NOI18N
        tblConfig.setRowHeight(20);
        jScrollPane1.setViewportView(tblConfig);

        javax.swing.ActionMap actionMap = twitz.TwitzApp.getContext().getActionMap(PreferencesDialog.class, this);
        btnOk.setAction(actionMap.get("btnOkClicked")); // NOI18N
        btnOk.setIcon(resourceMap.getIcon("btnOk.icon")); // NOI18N
        btnOk.setText(resourceMap.getString("btnOk.text")); // NOI18N
        btnOk.setName("btnOk"); // NOI18N

        btnApply.setAction(actionMap.get("applyChanges")); // NOI18N
        btnApply.setIcon(resourceMap.getIcon("btnApply.icon")); // NOI18N
        btnApply.setText(resourceMap.getString("btnApply.text")); // NOI18N
        btnApply.setName("btnApply"); // NOI18N

        btnCancel.setAction(actionMap.get("cancelEdit")); // NOI18N
        btnCancel.setIcon(resourceMap.getIcon("btnCancel.icon")); // NOI18N
        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addComponent(btnApply)
                        .addGap(69, 69, 69)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(btnCancel)
                    .addComponent(btnApply))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
	//}}}

	private void initDefaults()//{{{
	{
		DefaultTableColumnModel cModel = (DefaultTableColumnModel)tblConfig.getColumnModel();
		cModel.getColumn(0).setMaxWidth(10);
		DefaultTableModel mModel = (DefaultTableModel)tblConfig.getModel();
		sorter = this.getTableRowSorter(mModel);
		tblConfig.setRowSorter(sorter);
		tblConfig.setModel(mModel);
		sorter.sort();

		twitz.TwitzMainView.fixJScrollPaneBarsSize(jScrollPane1);

		WindowListener wl = new WindowAdapter() {

			public void windowActivated(WindowEvent e)
			{
				btnApply.setEnabled(false);
			}

		};
		this.addWindowListener(wl);
	}//}}}

	private TableRowSorter getTableRowSorter(DefaultTableModel model) {
		model.addTableModelListener(new TableModelListener() {

			public void tableChanged(TableModelEvent e)
			{
				int t = e.getType();
				if(t == TableModelEvent.INSERT || t == TableModelEvent.UPDATE ) {
					if(e.getColumn() != TableModelEvent.ALL_COLUMNS) 
					{
						int row = tblConfig.convertRowIndexToView(e.getLastRow());
						int col = e.getColumn();
						String s = (String)tblConfig.getValueAt(row, e.getColumn());
						String k = (String)tblConfig.getValueAt(row, 0);
						String cval = config.getString(k);
					//	if(logdebug)
					//	{
					//		logger.debug("Current value for row: "+row+", valie: "+s);
					//		logger.debug("Config value for key: "+k+", value: "+cval);
					//	}
						if(!cval.equals(s))
							btnApply.setEnabled(true);
					}
				}
			}
		});
		TableRowSorter s = new TableRowSorter(model);
		s.setSortable(0, false);
		List<RowSorter.SortKey> list = java.util.Collections.synchronizedList(new ArrayList());
		RowSorter.SortKey key = new RowSorter.SortKey(1, SortOrder.ASCENDING);
		list.add(key);
		s.setSortKeys(list);
		//s.sort();

		return s;
	}

	public void loadTable() {
		tblConfig.setDefaultRenderer(String.class, new PreferencesTableCellRenderer());
		Vector vConfig = new Vector();
		Enumeration en = config.getKeys();
		while(en.hasMoreElements()) {
			//Process keys for inclusion in dialog
			String key = (String)en.nextElement();
			if(key.endsWith(".cfgdesc") || key.endsWith(".cfgtype")) {
				continue; //skip to next iteration
			}
			if (!config.getString(key + ".cfgtype").equals("NULL"))
			{
				Vector row = new Vector();
				String value = config.getString(key);
				row.add(key);
				row.add(config.getString(key + ".cfgdesc"));
				row.add(value);
				vConfig.add(row);
				undo.setProperty(key, value);
			}
		}
		DefaultTableModel model = (DefaultTableModel)tblConfig.getModel();
		model.setDataVector(vConfig, vHeaders);
		tblConfig.getColumnModel().getColumn(2).setCellEditor(new BrowseCellEditor());
	}

	@Action
	public void cancelEdit()
	{
		String oldSkin = config.getString("twitz.skin");
		config.setProperties(undo);
		if(updateSkin) {
			firePropertyChange("lookAndFeelChange", oldSkin, config.getString("twitz.skin"));
		}
		updateSkin = false;
		updateLogin = false;
		dispose();
	}

	@Action
	public void btnOkClicked()
	{
		saveChanges();
		dispose();
	}

	//@SuppressWarnings("empty-statement")
	public void saveChanges() {
		DefaultTableModel model = (DefaultTableModel)tblConfig.getModel();
		Vector vData = model.getDataVector();
		String oldSkin = "";
		int size = vData.size();
		Properties p = new Properties();
		for(int i=0; i < size; i++) {
			Vector row = (Vector)vData.get(i);
			String key = row.get(0)+"";
			String value = row.get(2)+"";
			p.setProperty(key, value);
			if(key.equals("twitz.skin")) {
				if(!value.equals(config.getString(key))) {
					updateSkin = true;
					oldSkin = config.getString(key);
				}
			}
			if(key.equals("twitter.id") || key.equals("twitter.password")) {
				if(!value.equals(config.getString(key))) {
					//logger.debug(key+" value: "+value);
					//Tell TwitterManager to update itself.
					updateLogin = true;
				}
			}
		}
		config.setProperties(p);
		if(updateLogin)
		{
			try
			{
				TwitterManager tm = TwitterManager.getInstance();
				tm.login();
				//Any calls made to TwitterManager after this will be using the new login info.
				//TODO: need to call Twitter.verifyCredentials() here
			}
			catch(Exception ignore) {}
			twitz.TwitzMainView.getInstance().initTwitter();
			updateLogin = false;
		}
		if(updateSkin) {
			firePropertyChange("lookAndFeelChange", oldSkin, config.getString("twitz.skin"));
			//mainApp.setLAFFromSettings();
		}
		//updateSkin = false;
	}

	@Action
	public void applyChanges() {
		saveChanges();
		btnApply.setEnabled(false);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblConfig;
    // End of variables declaration//GEN-END:variables
	private SettingsManager config = SettingsManager.getInstance();
	private Vector vHeaders = new Vector();
	private TableRowSorter sorter;
	private TwitzApp mainApp;
	private boolean updateSkin = false;
	private boolean updateLogin = false;
	private final Logger logger = Logger.getLogger(this.getClass().getName());
	private final boolean logdebug = logger.isDebugEnabled();
	protected Properties undo = new Properties();
}
