/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TwitzOAuthDialog.java
 *
 * Created on Jul 31, 2010, 8:06:08 AM
 */

package twitz.ui.dialogs;

import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.ListSelectionModel;
import org.apache.log4j.Logger;
import org.jdesktop.application.Action;
import org.tmatesoft.sqljet.core.SqlJetException;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterMethod;
import twitter4j.http.AccessToken;
import twitter4j.http.RequestToken;
import twitz.TwitzMainView;
import twitz.util.DBManager;
import twitz.util.TwitzSessionManager;

/**
 *
 * @author mistik1
 */
public class TwitzOAuthDialog extends javax.swing.JDialog {
	private final String sessionName;

    /** Creates new form TwitzOAuthDialog */
    public TwitzOAuthDialog(java.awt.Frame parent, boolean modal, String sessionName) {
        super(parent, modal);
        initComponents();
		this.sessionName = sessionName;
		session = TwitzSessionManager.getInstance();
		view = session.getTwitzMainViewForSession(sessionName);
		twitter = view.getTwitterManager().getDefaultTwitterInstance();
		this.headers.addElement("ID");
		this.headers.addElement("Name");
		this.accessTokenTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		infoLabel.setText(resourceMap.getString("infoLabel.text"));
		urlLabel.setIcon(resourceMap.getImageIcon("urlLabel.icon"));
		pinLabel.setText(resourceMap.getString("pinLabel.text"));
		this.setMaximumSize(new java.awt.Dimension(300, 196));
		this.setPreferredSize(new java.awt.Dimension(300, 196));
		leftSeparator.setMaximumSize(new java.awt.Dimension(10, 10));
		rightSeparator.setMaximumSize(new java.awt.Dimension(10, 10));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        myLayeredPane = new javax.swing.JLayeredPane();
        displayPanel = new javax.swing.JPanel();
        atScrollPane = new javax.swing.JScrollPane();
        accessTokenTable = new javax.swing.JTable();
        requestPanel = new javax.swing.JPanel();
        infoLabel = new org.jdesktop.swingx.JXLabel();
        pinLabel = new javax.swing.JLabel();
        txtPin = new javax.swing.JTextField();
        urlLabel = new org.jdesktop.swingx.JXLabel();
        actionToolBar = new javax.swing.JToolBar();
        leftSeparator = new javax.swing.JToolBar.Separator();
        btnSelect = new javax.swing.JButton();
        btnRequest = new javax.swing.JButton();
        btnBrowse = new javax.swing.JButton();
        btnCopy = new javax.swing.JButton();
        rightSeparator = new javax.swing.JToolBar.Separator();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        setName("Form"); // NOI18N

        myLayeredPane.setName("myLayeredPane"); // NOI18N

        displayPanel.setName("displayPanel"); // NOI18N

        atScrollPane.setName("atScrollPane"); // NOI18N

        accessTokenTable.setModel(new AccessTokenModel());
        accessTokenTable.setFillsViewportHeight(true);
        accessTokenTable.setName("accessTokenTable"); // NOI18N
        atScrollPane.setViewportView(accessTokenTable);

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(atScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                .addContainerGap())
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(atScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
        );

        displayPanel.setBounds(0, 0, 360, 170);
        myLayeredPane.add(displayPanel, javax.swing.JLayeredPane.PALETTE_LAYER);

        requestPanel.setName("requestPanel"); // NOI18N

        
        infoLabel.setText(resourceMap.getString("infoLabel.text")); // NOI18N
        infoLabel.setLineWrap(true);
        infoLabel.setName("infoLabel"); // NOI18N
        infoLabel.setTextAlignment(org.jdesktop.swingx.JXLabel.TextAlignment.CENTER);

        pinLabel.setText(resourceMap.getString("pinLabel.text")); // NOI18N
        pinLabel.setName("pinLabel"); // NOI18N

        txtPin.setName("txtPin"); // NOI18N

        urlLabel.setIcon(resourceMap.getIcon("urlLabel.icon")); // NOI18N
        urlLabel.setLineWrap(true);
        urlLabel.setName("urlLabel"); // NOI18N
        urlLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout requestPanelLayout = new javax.swing.GroupLayout(requestPanel);
        requestPanel.setLayout(requestPanelLayout);
        requestPanelLayout.setHorizontalGroup(
            requestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, requestPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(requestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(urlLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                    .addComponent(infoLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, requestPanelLayout.createSequentialGroup()
                        .addComponent(pinLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPin, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)))
                .addContainerGap())
        );
        requestPanelLayout.setVerticalGroup(
            requestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(requestPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(urlLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(requestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pinLabel)
                    .addComponent(txtPin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        requestPanel.setBounds(0, 0, 360, 170);
        myLayeredPane.add(requestPanel, javax.swing.JLayeredPane.MODAL_LAYER);

        actionToolBar.setFloatable(false);
        actionToolBar.setRollover(true);
        actionToolBar.setName("actionToolBar"); // NOI18N

        leftSeparator.setMaximumSize(new java.awt.Dimension(1000, 10));
        leftSeparator.setName("leftSeparator"); // NOI18N
        actionToolBar.add(leftSeparator);

        
        btnSelect.setAction(actionMap.get("selectToken")); // NOI18N
        btnSelect.setIcon(resourceMap.getIcon("btnSelect.icon")); // NOI18N
        btnSelect.setText(resourceMap.getString("btnSelect.text")); // NOI18N
        btnSelect.setFocusable(false);
        btnSelect.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnSelect.setName("btnSelect"); // NOI18N
        actionToolBar.add(btnSelect);

        btnRequest.setAction(actionMap.get("requestNewToken")); // NOI18N
        btnRequest.setIcon(resourceMap.getIcon("btnRequest.icon")); // NOI18N
        btnRequest.setText(resourceMap.getString("btnRequest.text")); // NOI18N
        btnRequest.setToolTipText(resourceMap.getString("btnRequest.toolTipText")); // NOI18N
        btnRequest.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRequest.setFocusable(false);
        btnRequest.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnRequest.setName("btnRequest"); // NOI18N
        actionToolBar.add(btnRequest);

        btnBrowse.setAction(actionMap.get("launchBrowser")); // NOI18N
        btnBrowse.setIcon(resourceMap.getIcon("btnBrowse.icon")); // NOI18N
        btnBrowse.setText(resourceMap.getString("btnBrowse.text")); // NOI18N
        btnBrowse.setToolTipText(resourceMap.getString("btnBrowse.toolTipText")); // NOI18N
        btnBrowse.setFocusable(false);
        btnBrowse.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnBrowse.setName("btnBrowse"); // NOI18N
        actionToolBar.add(btnBrowse);

        btnCopy.setAction(actionMap.get("copyToClipboard")); // NOI18N
        btnCopy.setIcon(resourceMap.getIcon("btnCopy.icon")); // NOI18N
        btnCopy.setText(resourceMap.getString("btnCopy.text")); // NOI18N
        btnCopy.setToolTipText(resourceMap.getString("btnCopy.toolTipText")); // NOI18N
        btnCopy.setFocusable(false);
        btnCopy.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnCopy.setName("btnCopy"); // NOI18N
        actionToolBar.add(btnCopy);

        rightSeparator.setMaximumSize(new java.awt.Dimension(1000, 10));
        rightSeparator.setName("rightSeparator"); // NOI18N
        actionToolBar.add(rightSeparator);

        btnCancel.setAction(actionMap.get("doCancel")); // NOI18N
        btnCancel.setIcon(resourceMap.getIcon("btnCancel.icon")); // NOI18N
        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setFocusable(false);
        btnCancel.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnCancel.setName("btnCancel"); // NOI18N
        actionToolBar.add(btnCancel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(myLayeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
            .addComponent(actionToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(myLayeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(actionToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accessTokenTable;
    private javax.swing.JToolBar actionToolBar;
    private javax.swing.JScrollPane atScrollPane;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnRequest;
    private javax.swing.JButton btnSelect;
    private javax.swing.JPanel displayPanel;
    private org.jdesktop.swingx.JXLabel infoLabel;
    private javax.swing.JToolBar.Separator leftSeparator;
    private javax.swing.JLayeredPane myLayeredPane;
    private javax.swing.JLabel pinLabel;
    private javax.swing.JPanel requestPanel;
    private javax.swing.JToolBar.Separator rightSeparator;
    private javax.swing.JTextField txtPin;
    private org.jdesktop.swingx.JXLabel urlLabel;
    // End of variables declaration//GEN-END:variables

	public enum Mode {
		REQUEST,
		SELECT
	};
	private final TwitzSessionManager session;
	private DBManager DBM = DBManager.getInstance();
	org.jdesktop.application.ResourceMap resourceMap = twitz.TwitzApp.getContext().getResourceMap(TwitzOAuthDialog.class);
	javax.swing.ActionMap actionMap = twitz.TwitzApp.getContext().getActionMap(TwitzOAuthDialog.class, this);
	private static final Logger logger = Logger.getLogger(TwitzOAuthDialog.class.getName());
	private Vector headers = new Vector();
	private Mode mode;
	private final TwitzMainView view;
	private String requestUrl = "";
	private int selectedId = -1;
	private volatile AccessToken createdToken = null;
	private RequestToken requestToken = null;
	private Twitter twitter = null;

	private class AccessTokenModel extends javax.swing.table.DefaultTableModel
	{
		boolean[] canEdit = new boolean [] {
			false, false
		};

		public AccessTokenModel()
		{
			super(new Object[][] { { null, null } },
					new String[] { "ID", "Name" }
			);
		}

		@Override
		public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
        }

		@Override
		public Class getColumnClass(int col)
		{
			if(col == 0)
				return Integer.class;
			else
				return String.class;
		}
	}

	private void loadTable()
	{
		logger.info("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii");
		List<Map<String, Object>> list = null;
		try
		{
			list = DBM.getAvailableTokens();
		}
		catch (SqlJetException ex)
		{
			logger.error(ex.getLocalizedMessage());
		}
		logger.info("jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj");
		if(list != null && !list.isEmpty())
		{
			int row = -1, count = 0;
			AccessTokenModel model = new AccessTokenModel();
			Vector<Vector> vtokens = new Vector<Vector>();
			logger.info(list);
			for(Map<String, Object> map : list)
			{
				AccessToken token = (AccessToken)map.get("token");
				String name= (String)map.get("name");
				int id = (Integer)map.get("id");
				Vector t = new Vector();
				t.addElement(id);
				t.addElement(name);
				vtokens.addElement(t);
				if(id == selectedId)
					row = count;
				count++;
			}
			model.setDataVector(vtokens, headers);
			this.accessTokenTable.setModel(model);
			this.accessTokenTable.getSelectionModel().setSelectionInterval(row, row);
		}
		else
		{
			this.setMode(Mode.REQUEST);
		}
	}

	@Action
	public void selectToken()
	{
		if(mode.equals(Mode.SELECT))
		{
			if(this.accessTokenTable.getSelectedRow() == -1)
				return;
			AccessTokenModel model = (AccessTokenModel)this.accessTokenTable.getModel();
			int row = this.accessTokenTable.getSelectedRow();
			int id = (Integer)model.getValueAt(row, 0);
			this.selectedId = id;
			this.dispose();
		}
		else
		{
			if (requestToken != null)
			{
				String pin = this.txtPin.getText();
				if (pin.isEmpty())
				{
					try
					{
						this.createdToken = twitter.getOAuthAccessToken(requestToken);
					}
					catch (TwitterException ex)
					{
						logger.error(ex.getLocalizedMessage());
						view.displayError(ex, "OAuth error", "Authorization error: Could not generate access token", null, false);
					}
				}
				else
				{
					try
					{
						this.createdToken = twitter.getOAuthAccessToken(requestToken, pin);
					}
					catch (TwitterException ex)
					{
						logger.error(ex.getLocalizedMessage());
						view.displayError(ex, "OAuth error", "Authorization error: Could not generate access token", null, false);
					}
				}
				if (createdToken != null)
				{
					try
					{
						DBM.storeAccessToken(createdToken);
						setSelectedId(createdToken.getUserId());
						//setMode(Mode.SELECT);
						createdToken = null;
						this.dispose();
					}
					catch (SqlJetException ex)
					{
						logger.error(ex.getLocalizedMessage());
						view.displayError(ex, "Database Error", "Error while attempting to store generated access token", null, false);
					}
				}
			}
			else
			{
				return;
			}
		}
	}

	@Action
	public void copyToClipboard()
	{
		Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();
		StringSelection strSel = new StringSelection(requestUrl);
		clip.setContents(strSel, strSel);
	}

	@Action
	public void launchBrowser()
	{
		Desktop desktop = Desktop.getDesktop();
		if(desktop.isSupported(Desktop.Action.BROWSE))
		{
			URI uri = null;
			try
			{
				uri = new URI(requestUrl);
			}
			catch (URISyntaxException ex)
			{
				logger.error(ex.getMessage());
				return;
			}
			try
			{
				desktop.browse(uri);
			}
			catch (IOException ex)
			{
				logger.error(ex.getLocalizedMessage());
			}
		}
	}

	@Action
	public void requestNewToken()
	{
		this.setMode(Mode.REQUEST);
	}

	@Action
	public void doCancel()
	{
		this.dispose();
	}

	public void setMode(Mode mode)
	{
		this.mode = mode;
		switch(mode)
		{
			case REQUEST:
				myLayeredPane.moveToFront(this.requestPanel);
				this.displayPanel.setVisible(false);
				this.requestPanel.setVisible(true);
				btnRequest.setVisible(false);
				if(Desktop.isDesktopSupported())
					this.btnBrowse.setVisible(true);
				this.btnCopy.setVisible(true);
				this.txtPin.setText("");
				
				
				try
				{
					requestToken = twitter.getOAuthRequestToken();
					requestUrl = requestToken.getAuthorizationURL();
				}
				catch (TwitterException ex)
				{
					logger.error(ex.getLocalizedMessage());
					view.displayError(ex, "OAuth error", "Authorization error: Could not generate request token",null, false);
				}
				if(requestToken != null)
				{
					this.urlLabel.setText(requestUrl);
				}
			break;
			case SELECT:
				myLayeredPane.moveToFront(this.displayPanel);
				this.requestPanel.setVisible(false);
				this.displayPanel.setVisible(true);
				this.btnCopy.setVisible(false);
				this.btnBrowse.setVisible(false);
				this.btnRequest.setVisible(true);
				loadTable();
			break;
		}
	}

	public Mode getMode()
	{
		return this.mode;
	}

	public int getSelectedId()
	{
		return this.selectedId;
	}

	public void setSelectedId(int id)
	{
		this.selectedId = id;
	}
}
