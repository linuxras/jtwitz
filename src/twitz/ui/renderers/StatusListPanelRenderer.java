/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StatusListPanelRenderer.java
 *
 * Created on Jul 8, 2010, 11:39:57 AM
 */

package twitz.ui.renderers;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Image;
import java.awt.MediaTracker;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Map;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;
import javax.swing.border.SoftBevelBorder;
import javax.swing.border.TitledBorder;
import org.apache.log4j.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.swingx.JXPanel;
import org.pushingpixels.substance.api.SubstanceLookAndFeel;
import org.pushingpixels.substance.api.renderers.SubstanceDefaultListCellRenderer;
import twitter4j.Place;
import twitter4j.Status;
import twitter4j.User;
import twitter4j.util.TimeSpanUtil;
import twitz.TwitzApp;
import twitz.TwitzMainView;
import twitz.events.DefaultTwitzEventModel;
import twitz.events.TwitzEvent;
import twitz.events.TwitzEventModel;
import twitz.events.TwitzEventType;
import twitz.events.TwitzListener;
import twitz.util.SettingsManager;

/**
 *
 * @author mistik1
 */
public class StatusListPanelRenderer extends JPanel implements TwitzEventModel, ListCellRenderer {
	private Status status;
	private DefaultTwitzEventModel dtem = new DefaultTwitzEventModel();
	private SettingsManager config = SettingsManager.getInstance();
	javax.swing.ActionMap actionMap = twitz.TwitzApp.getContext().getActionMap(StatusListPanelRenderer.class, this);
	org.jdesktop.application.ResourceMap resourceMap = twitz.TwitzApp.getContext().getResourceMap(StatusListPanelRenderer.class);
	private String statusTitle = resourceMap.getString("StatusListPanel.border.title");
	private Border border = BorderFactory.createTitledBorder(new SoftBevelBorder(BevelBorder.RAISED), statusTitle, TitledBorder.LEADING, TitledBorder.BELOW_TOP); // NOI18N
	private SubstanceDefaultListCellRenderer uiPainter = new SubstanceDefaultListCellRenderer();
	private final Logger logger = Logger.getLogger(this.getClass().getName());
	private boolean logdebug = logger.isDebugEnabled();

    /** Creates new form StatusListPanelRenderer */
    public StatusListPanelRenderer() {
		this.putClientProperty(SubstanceLookAndFeel.COLORIZATION_FACTOR, 1.0);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked") //{{{
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        actionPanel = new javax.swing.JPanel();
        timePanel = new javax.swing.JPanel();
        lblTime = new javax.swing.JLabel();
        actionsToolBar = new javax.swing.JToolBar();
        btnRetweet = new javax.swing.JButton();
        btnReplyTo = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblRetweet = new javax.swing.JLabel();
        lblFav = new javax.swing.JLabel();
        statsPanel = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();

        setBorder(getBorder());
        setMinimumSize(new java.awt.Dimension(100, 30));
        setName("StatusListPanel"); // NOI18N
        setPreferredSize(new java.awt.Dimension(300, 119));
        setLayout(new java.awt.BorderLayout());

        actionPanel.setName("actionPanel"); // NOI18N
        actionPanel.setLayout(new java.awt.BorderLayout());

        timePanel.setName("timePanel"); // NOI18N
        timePanel.setPreferredSize(new java.awt.Dimension(100, 22));

        lblTime.setText(resourceMap.getString("lblTime.text")); // NOI18N
        lblTime.setName("lblTime"); // NOI18N

        javax.swing.GroupLayout timePanelLayout = new javax.swing.GroupLayout(timePanel);
        timePanel.setLayout(timePanelLayout);
        timePanelLayout.setHorizontalGroup(
            timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTime, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
        );
        timePanelLayout.setVerticalGroup(
            timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        actionPanel.add(timePanel, java.awt.BorderLayout.CENTER);

        actionsToolBar.setFloatable(false);
        actionsToolBar.setRollover(true);
        actionsToolBar.setName("actionsToolBar"); // NOI18N
        actionsToolBar.setOpaque(false);
        actionsToolBar.setPreferredSize(new java.awt.Dimension(108, 24));

        btnRetweet.setAction(actionMap.get("retweetStatus")); // NOI18N
        btnRetweet.setIcon(resourceMap.getIcon("btnRetweet.icon")); // NOI18N
        btnRetweet.setText(resourceMap.getString("btnRetweet.text")); // NOI18N
        btnRetweet.setToolTipText(resourceMap.getString("btnRetweet.toolTipText")); // NOI18N
        btnRetweet.setFocusable(false);
        btnRetweet.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRetweet.setMaximumSize(new java.awt.Dimension(88, 20));
        btnRetweet.setName("btnRetweet"); // NOI18N
        btnRetweet.setOpaque(false);
        btnRetweet.setPreferredSize(new java.awt.Dimension(20, 20));
        btnRetweet.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        actionsToolBar.add(btnRetweet);

        btnReplyTo.setAction(actionMap.get("replyToStatus")); // NOI18N
        btnReplyTo.setIcon(resourceMap.getIcon("btnReplyTo.icon")); // NOI18N
        btnReplyTo.setText(resourceMap.getString("btnReplyTo.text")); // NOI18N
        btnReplyTo.setToolTipText(resourceMap.getString("btnReplyTo.toolTipText")); // NOI18N
        btnReplyTo.setFocusable(false);
        btnReplyTo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReplyTo.setMaximumSize(new java.awt.Dimension(88, 20));
        btnReplyTo.setName("btnReplyTo"); // NOI18N
        btnReplyTo.setOpaque(false);
        btnReplyTo.setPreferredSize(new java.awt.Dimension(20, 20));
        btnReplyTo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        actionsToolBar.add(btnReplyTo);

        btnDelete.setAction(actionMap.get("deleteStatus")); // NOI18N
        btnDelete.setIcon(resourceMap.getIcon("btnDelete.icon")); // NOI18N
        btnDelete.setText(resourceMap.getString("btnDelete.text")); // NOI18N
        btnDelete.setToolTipText(resourceMap.getString("btnDelete.toolTipText")); // NOI18N
        btnDelete.setFocusable(false);
        btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelete.setMaximumSize(new java.awt.Dimension(88, 20));
        btnDelete.setName("btnDelete"); // NOI18N
        btnDelete.setOpaque(false);
        btnDelete.setPreferredSize(new java.awt.Dimension(20, 20));
        btnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        actionsToolBar.add(btnDelete);

        lblRetweet.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRetweet.setIcon(resourceMap.getIcon("lblRetweet.icon")); // NOI18N
        lblRetweet.setText(resourceMap.getString("lblRetweet.text")); // NOI18N
        lblRetweet.setToolTipText(resourceMap.getString("lblRetweet.toolTipText")); // NOI18N
        lblRetweet.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblRetweet.setIconTextGap(0);
        lblRetweet.setName("lblRetweet"); // NOI18N
        lblRetweet.setPreferredSize(new java.awt.Dimension(22, 22));
        actionsToolBar.add(lblRetweet);

        lblFav.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFav.setIcon(resourceMap.getIcon("lblFav.icon")); // NOI18N
        lblFav.setText(resourceMap.getString("lblFav.text")); // NOI18N
        lblFav.setToolTipText(resourceMap.getString("lblFav.toolTipText")); // NOI18N
        lblFav.setName("lblFav"); // NOI18N
        lblFav.setPreferredSize(new java.awt.Dimension(22, 22));
        actionsToolBar.add(lblFav);

        actionPanel.add(actionsToolBar, java.awt.BorderLayout.EAST);

        add(actionPanel, java.awt.BorderLayout.PAGE_END);

        statsPanel.setName("statsPanel"); // NOI18N

        lblStatus.setText(resourceMap.getString("lblStatus.text")); // NOI18N
        lblStatus.setName("lblStatus"); // NOI18N

        javax.swing.GroupLayout statsPanelLayout = new javax.swing.GroupLayout(statsPanel);
        statsPanel.setLayout(statsPanelLayout);
        statsPanelLayout.setHorizontalGroup(
            statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
        );
        statsPanelLayout.setVerticalGroup(
            statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
        );

        add(statsPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
	//}}}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JToolBar actionsToolBar;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReplyTo;
    private javax.swing.JButton btnRetweet;
    private javax.swing.JLabel lblFav;
    private javax.swing.JLabel lblRetweet;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTime;
    private javax.swing.JPanel statsPanel;
    private javax.swing.JPanel timePanel;
    // End of variables declaration//GEN-END:variables

	@Action
	public void retweetStatus()//{{{
	{
		if(logdebug)
			logger.debug("Sending retweet");
		Map map = Collections.synchronizedMap(new TreeMap());
		map.put("async", true);
		map.put("caller", this);
		ArrayList args = new ArrayList();
		args.add(getStatus().getId());
		map.put("arguments", args);
		TwitzEvent te = new TwitzEvent(this, TwitzEventType.RETWEET_STATUS, new Date().getTime(), map);
		fireTwitzEvent(te);
	}//}}}
	
	@Action
	public void deleteStatus()//{{{
	{
		if(logdebug)
			logger.debug("Sending delete status request");
		Map map = Collections.synchronizedMap(new TreeMap());
		map.put("async", true);
		map.put("caller", this);
		ArrayList args = new ArrayList();
		args.add(getStatus().getId());
		map.put("arguments", args);
		TwitzEvent te = new TwitzEvent(this, TwitzEventType.DESTROY_STATUS, new Date().getTime(), map);
		fireTwitzEvent(te);
	}//}}}

	@Action
	public void replyToStatus()
	{
		if(logdebug)
			logger.debug("Sending reply to Status");
	}

	private void updateBorder(boolean selected)//{{{
	{
		border = BorderFactory.createTitledBorder(new SoftBevelBorder(selected ? BevelBorder.LOWERED : BevelBorder.RAISED), statusTitle, TitledBorder.LEADING, TitledBorder.BELOW_TOP);
		setBorder(border);
	}//}}}

	public void setStatus(Status stat)//{{{
	{
		if(stat != null)
		{
			this.status = stat;
			this.statusTitle = status.getUser().getScreenName();
		}
	}//}}}

	public Status getStatus()//{{{
	{
		return this.status;
	}//}}}

	public void setStatusText(String value)//{{{
	{
		this.lblStatus.setText(value);
	}//}}}

	public String getStatusText()//{{{
	{
		return this.lblStatus.getText();
	}//}}}

	public void setTimeText(String value)//{{{
	{
		this.lblTime.setText(value);
	}//}}}

	public void setAvatar(ImageIcon value)
	{
		this.lblStatus.setIcon(value);
	}

	public void addTwitzListener(TwitzListener o)
	{
		dtem.addTwitzListener(o);
	}

	public void removeTwitzListener(TwitzListener o)
	{
		dtem.removeTwitzListener(o);
	}

	public void fireTwitzEvent(TwitzEvent e)
	{
		dtem.fireTwitzEvent(e);
	}

	public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)//{{{
	{
		uiPainter.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
		Status s = (Status)value;
		User u = s.getUser();
		Place p = s.getPlace();
		Date d = s.getCreatedAt();

		setFont(new Font("Arial", Font.BOLD, 10)); //TODO: put this in the resourceMap so its not hard coded
		URL imgURI = u.getProfileImageURL();
		ImageIcon icon = new ImageIcon(imgURI);
		int istatus = icon.getImageLoadStatus();
		Image img = null;
		if(istatus == MediaTracker.ERRORED) {
			ResourceMap res = TwitzApp.getContext().getResourceMap(TwitzMainView.class);
			icon = res.getImageIcon("icon.comments");
			img = icon.getImage().getScaledInstance(32, 32, java.awt.Image.SCALE_SMOOTH);
		}
		else {
			img = icon.getImage().getScaledInstance(32, 32, java.awt.Image.SCALE_SMOOTH);
		}
		icon = new ImageIcon(img);
		//getScaledInstance(int width, int height, int hints)
		this.lblStatus.setVerticalAlignment(JLabel.TOP);

		StringBuffer buf = new StringBuffer("<p>");
//		if(s.getInReplyToScreenName() != null && !s.getInReplyToScreenName().equals("")) {
//			buf.append("<strong><font color=\"blue\">@");
//			buf.append(s.getInReplyToScreenName());
//			buf.append(" - </font></strong>");
//		}
		buf.append(pretify(s,s.getText()));
		buf.append("</p>");
		StringBuffer tbuf = new StringBuffer();
		tbuf.append("<p><center><strong>");
		tbuf.append(u.getScreenName()+"</strong><br/><em>");
		tbuf.append(TimeSpanUtil.toTimeSpanString(d));
		tbuf.append("<br/>"+p.getName()+"</em></center></p>");

		setAvatar(icon);
		setStatus(s);
		setTimeText(TimeSpanUtil.toTimeSpanString(d));
		//setToolTipText("<html>"+tableWrap(tbuf.toString(), 200));
		//setToolTipText("<html>"+tableWrap(buf.toString(), 250));
		//int width = list.getWidth()-50;
		//System.out.println("List width: "+width);
//		if(list.getParent() != null)
//		{
//			width = list.getParent().getWidth()-85;
//			//System.out.println("Parent found using width: "+width);
//		}
		setStatusText("<html>"+tableWrap(buf.toString()));

		this.lblStatus.setVerticalAlignment(JLabel.TOP);
		this.lblStatus.setHorizontalAlignment(JLabel.CENTER);
		
		updateBorder(isSelected);
		
		fixButtons(s);
		setForeground(uiPainter.getForeground());
		setBackground(uiPainter.getBackground());
		addTwitzListener(TwitzMainView.getInstance());
		return this;
	}//}}}

	@Override
	public boolean isShowing()
	{
		return true;
	}

	private void fixButtons(Status s)//{{{
	{
		btnDelete.setEnabled(s.getUser().getScreenName().equals(config.getString("twitter.id")));
		btnRetweet.setEnabled(s.getUser().getScreenName().equals(config.getString("twitter.id")));
		btnReplyTo.setEnabled(!s.getUser().getScreenName().equals(config.getString("twitter.id")));
		lblRetweet.setEnabled(s.isRetweet());
		lblFav.setEnabled(s.isFavorited());
	}//}}}

	private void updateColors()
	{
		Color background = uiPainter.getBackground();
		Color foreground = uiPainter.getForeground();
		setForeground(foreground);
		setBackground(background);
		actionPanel.setForeground(foreground);
		actionPanel.setBackground(background);
//		buttonPanel.setForeground(foreground);
//		buttonPanel.setBackground(background);
		lblFav.setForeground(foreground);
		lblFav.setBackground(background);
		lblRetweet.setForeground(foreground);
		lblRetweet.setBackground(background);
		lblStatus.setForeground(foreground);
		lblStatus.setBackground(background);
		lblTime.setForeground(foreground);
		lblTime.setBackground(background);
		statsPanel.setForeground(foreground);
		statsPanel.setBackground(background);
		timePanel.setForeground(foreground);
		timePanel.setBackground(background);
	}
	private String tableWrap(String source/*, int width*/) {//{{{
		StringBuffer table = new StringBuffer("<table border=0 width=\"90%\"");
		/*table.append(width+"");*/
		table.append("><tr><td>");
		table.append(source);
		table.append("</td></tr></table>");
		return table.toString();
	}//}}}

	private String pretify(Status stat, String text)//{{{
	{
		ArrayList<String> list = new ArrayList<String>();
		String rv = "";
		String left = "<strong><font color=\"blue\">";
		String right = "</font></strong>";
		Pattern p = Pattern.compile("([#@]\\w+?)\\s");
		Matcher m = p.matcher(text);
		while(m.find())
		{
			list.add(m.group());
		}
		String t = text;
		for(String s:list)
		{
			t = t.replaceAll(s, left+s+right);
		}
		rv = t;
		return rv;
	} //}}}

}
